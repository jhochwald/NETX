<?xml version="1.0" encoding="utf-8" ?>
<helpItems xmlns="http://msh" schema="maml">
	<!--Generated by: SAPIEN PowerShell HelpWriter 2015 v1.0.16-->
	<!--
		Module: 		NETX.OpenSource
		Version:		1.0.0.0
	-->
	<!--All Commands-->
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Approve-MailAddress</command:name>
			<maml:description>
				<maml:para>REGEX check to see if a given Email address is valid</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Approve</command:verb>
			<command:noun>MailAddress</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Checks a given Mail Address against a REGEX Filter to see if it is
RfC822 complaint
Not directly related is the REGEX check. Most mailer will not be able
to handle it if there are non standard chars within the Mail Address...</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Approve-MailAddress</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Mail">
					<maml:name>Email</maml:name>
					<maml:description>
						<maml:para>e.g. &quot;joerg.hochwald@outlook.com&quot;
Email address to check</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Mail">
				<maml:name>Email</maml:name>
				<maml:description>
					<maml:para>e.g. &quot;joerg.hochwald@outlook.com&quot;
Email address to check</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Internal Helper function to check Mail addresses via REGEX to see
if they are RfC822 complaint before use them.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Approve-MailAddress -Email:&quot;No.Reply@bewoelkt.net&quot;</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Checks a given Mail Address (No.Reply@bewoelkt.net) against a REGEX
Filter to see if it is RfC822 complaint</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Approve-MailAddress -Email:&quot;J&#246;rg.hochwald@gmail.com&quot;</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
Checks a given Mail Address (J&#195;&#182;rg.hochwald@gmail.com) against a
REGEX Filter to see if it is RfC822 complaint, and it is NOT</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Approve-MailAddress -Email:&quot;Joerg hochwald@gmail.com&quot;</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
Checks a given Mail Address (Joerg hochwald@gmail.com) against a
REGEX Filter to see if it is RfC822 complaint, and it is NOT</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Approve-MailAddress -Email:&quot;Joerg.hochwald@gmail&quot;</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
Checks a given Mail Address (Joerg.hochwald@gmail) against a
REGEX Filter to see if it is RfC822 complaint, and it is NOT</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>ConvertFrom-BinHex</command:name>
			<maml:description>
				<maml:para>Convert a HEX Value to a String</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>ConvertFrom</command:verb>
			<command:noun>BinHex</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Converts a given HEX value back to human readable strings</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>ConvertFrom-BinHex</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>binhex</maml:name>
					<maml:description>
						<maml:para></maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>binhex</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>ConvertFrom-BinHex 0c</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Return the regular Value (12) of the given HEX 0c</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>ConvertTo-BinHex</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Support: https://github.com/jhochwald/NETX/issues</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>ConvertTo-BinHex</command:name>
			<maml:description>
				<maml:para>Convert a String to HEX</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>ConvertTo</command:verb>
			<command:noun>BinHex</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Converts a given String or Array to HEX and dumps it</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>ConvertTo-BinHex</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>array</maml:name>
					<maml:description>
						<maml:para>Array that should be converted to HEX</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>array</maml:name>
				<maml:description>
					<maml:para>Array that should be converted to HEX</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>ConvertTo-BinHex 1234</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Return the HEX Value (4d2) of the String 1234</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>ConvertFrom-BinHex</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Support: https://github.com/jhochwald/NETX/issues</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Check-SessionArch</command:name>
			<maml:description>
				<maml:para>Show the CPU architecture</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Check</command:verb>
			<command:noun>SessionArch</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>You want to know if this is a 64BIT or still a 32BIT system?
Might be useful, maybe not!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Check-SessionArch</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Additional information about the function.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Check-SessionArch</dev:code>
				<dev:remarks>
					<maml:para>x64

Description
-----------
Shows that the architecture is 64BIT and that the session also
supports X64</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-TcpPortStatus</command:name>
			<maml:description>
				<maml:para>Check a TCP Port</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>TcpPortStatus</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Opens a connection to a given (or default) TCP Port to a given
(or default) server.

This is not a simple port ping, it creates a real connection to
see if the port is alive!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-TcpPortStatus</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>Port</maml:name>
					<maml:description>
						<maml:para>Port to use e.g. &quot;25&quot;, default is 587</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
					<maml:name>Server</maml:name>
					<maml:description>
						<maml:para>SMTP Server to use e.g. &quot;outlook.office365.com&quot; or &quot;192.168.16.10&quot;</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>Port</maml:name>
				<maml:description>
					<maml:para>Port to use e.g. &quot;25&quot;, default is 587</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>587</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>SMTP Server to use e.g. &quot;outlook.office365.com&quot; or &quot;192.168.16.10&quot;</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>outlook.office365.com</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Internal Helper function to check if we can reach a server via a TCP
connection on a given port</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-TcpPortStatus</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Check port 587/TCP on the default Server</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-TcpPortStatus -Port:25 -Server:mx.NET-Experts.net</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Check port 25/TCP on Server mx.NET-Experts.net</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Clear-AllEventLogs</command:name>
			<maml:description>
				<maml:para>Delete all EventLog entries</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Clear</command:verb>
			<command:noun>AllEventLogs</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Delete all EventLog entries</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Clear-AllEventLogs</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Could be great to clean up everything, but everything is gone forever!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Clear-AllEventLogs</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Ask if it should delete all EventLog entries and you need to confirm it</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Clear-AllEventLogs -Confirm:$false</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Delete all EventLog entries and you do not need to confirm it</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Clear-TempDir</command:name>
			<maml:description>
				<maml:para>Cleanup the TEMP Directory</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Clear</command:verb>
			<command:noun>TempDir</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Cleanup the TEMP Directory</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Clear-TempDir</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="RemoveOlderThen">
					<maml:name>Days</maml:name>
					<maml:description>
						<maml:para>Number of days, older files will be removed!</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="RemoveOlderThen">
				<maml:name>Days</maml:name>
				<maml:description>
					<maml:para>Number of days, older files will be removed!</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>30</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Additional information about the function.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Clear-TempDir</dev:code>
				<dev:remarks>
					<maml:para>Freed 439,58 MB disk space

# Will delete all Files older then 30 Days (This is the default)
# You have to confirm every item before it is deleted</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Clear-TempDir -Days:60 -Confirm:$false</dev:code>
				<dev:remarks>
					<maml:para>Freed 407,17 MB disk space

Description
-----------
Will delete all Files older then 30 Days (This is the default)
You do not have to confirm every item before it is deleted</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Confirm-XMLisValid</command:name>
			<maml:description>
				<maml:para>Checks if one, or more, given files looks like valid XML formated</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Confirm</command:verb>
			<command:noun>XMLisValid</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This function do some basic checks to see if one, or more, given files
looks valid XML formated.
If you use multiple files at once, the answer is False (Boolean)
even if just one is not valid!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Confirm-XMLisValid</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>XmlFilePath</maml:name>
					<maml:description>
						<maml:para>One or more Files to check</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>XmlFilePath</maml:name>
				<maml:description>
					<maml:para>One or more Files to check</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>The return is Boolean. The function should never throw an error,
maximum is a warning! So if you want to catch a problem be aware
of that!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Confirm-XMLisValid -XmlFilePath &#39;D:\apache-maven-3.3.9\conf\settings.xml&#39;</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
This will check if the file &#39;D:\apache-maven-3.3.9\conf\settings.xml&#39;
looks like a valis XML file, what is does.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Confirm-XMLisValid -XmlFilePath &#39;D:\apache-maven-3.3.9\README.txt&#39;</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
Looks like the File &#39;D:\apache-maven-3.3.9\README.txt&#39; is not a
valid XML formated file.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Confirm-XMLisValid -XmlFilePath &#39;D:\apache-maven-3.3.9\README.txt&#39;, &#39;D:\apache-maven-3.3.9\conf\settings.xml&#39;</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
Checks multiple Files to see if they are valid XML files.
If one is not, &quot;False&quot; is returned!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>ConvertTo-hex</command:name>
			<maml:description>
				<maml:para>Converts a given integer to HEX</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>ConvertTo</command:verb>
			<command:noun>hex</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Converts any given Integer (INT) to Hex and dumps it to the Console</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>ConvertTo-hex</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>dec</maml:name>
					<maml:description>
						<maml:para>N.A.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Int64</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>dec</maml:name>
				<maml:description>
					<maml:para>N.A.</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">Int64</command:parameterValue>
				<dev:type>
					<maml:name>Int64</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>0</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Int64</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Renamed function
Just a little helper function</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>ConvertTo-hex &quot;100&quot;</dev:code>
				<dev:remarks>
					<maml:para>0x64

Description
-----------
Converts a given integer to HEX</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>ConvertTo-PlainText</command:name>
			<maml:description>
				<maml:para>Convert a secure string back to plain text</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>ConvertTo</command:verb>
			<command:noun>PlainText</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Convert a secure string back to plain text</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>ConvertTo-PlainText</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="SecureString">
					<maml:name>secure</maml:name>
					<maml:description>
						<maml:para>Secure String to convert</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="SecureString">
				<maml:name>secure</maml:name>
				<maml:description>
					<maml:para>Secure String to convert</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">SecureString</command:parameterValue>
				<dev:type>
					<maml:name>SecureString</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Helper function</maml:para>
			</maml:alert>
		</maml:alertSet>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Create-ZIP</command:name>
			<maml:description>
				<maml:para>Create a ZIP archive of a given file</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Create</command:verb>
			<command:noun>ZIP</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Create a ZIP archive of a given file.
By default within the same directory and the same name as the input
file.
This can be changed via command line parameters</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Create-ZIP</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Input">
					<maml:name>InputFile</maml:name>
					<maml:description>
						<maml:para>Mandatory

The parameter InputFile is the file that should be compressed.
You can use it like this: &quot;ClutterReport-20150617171648.csv&quot;,
or with a full path like this:
&quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot;</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="Output">
					<maml:name>OutputFile</maml:name>
					<maml:description>
						<maml:para>Optional

You can use it like this: &quot;ClutterReport-20150617171648&quot;,
or with a full path like this:
&quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648&quot;

Do not append the extension!</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
					<maml:name>OutputPath</maml:name>
					<maml:description>
						<maml:para>Optional

By default the new archive will be created in the same directory as the
input file, if you would like to have it in another directory specify
it here like this: &quot;C:\temp\&quot;

The directory must exist!</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Input">
				<maml:name>InputFile</maml:name>
				<maml:description>
					<maml:para>Mandatory

The parameter InputFile is the file that should be compressed.
You can use it like this: &quot;ClutterReport-20150617171648.csv&quot;,
or with a full path like this:
&quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot;</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="Output">
				<maml:name>OutputFile</maml:name>
				<maml:description>
					<maml:para>Optional

You can use it like this: &quot;ClutterReport-20150617171648&quot;,
or with a full path like this:
&quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648&quot;

Do not append the extension!</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>OutputPath</maml:name>
				<maml:description>
					<maml:para>Optional

By default the new archive will be created in the same directory as the
input file, if you would like to have it in another directory specify
it here like this: &quot;C:\temp\&quot;

The directory must exist!</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Create-ZIP -InputFile &quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This will create the archive &quot;ClutterReport-20150617171648.zip&quot; from
the given input file
&quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot;.

The new archive will be located in &quot;C:\scripts\PowerShell\export\&quot;!</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Create-ZIP -InputFile &quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot; -OutputFile &quot;NewClutterReport&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This will create the archive &quot;NewClutterReport.zip&quot; from the given
input file
&quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot;.

The new archive will be located in &quot;C:\scripts\PowerShell\export\&quot;!</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Create-ZIP -InputFile &quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot; -OutputPath &quot;C:\temp\&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This will create the archive &quot;ClutterReport-20150617171648.zip&quot; from
the given input file
&quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot;.

The new archive will be located in &quot;C:\temp\&quot;!

The directory must exist!</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Create-ZIP -InputFile &quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot; -OutputFile &quot;NewClutterReport&quot; -OutputPath &quot;C:\temp\&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This will create the archive &quot;NewClutterReport.zip&quot; from the given
input file
&quot;C:\scripts\PowerShell\export\ClutterReport-20150617171648.csv&quot;.

The new archive will be located in &quot;C:\temp\&quot;!

The directory must exist!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Disable-IEESEC</command:name>
			<maml:description>
				<maml:para>Disabling IE Enhanced Security Configuration (IE ESC)</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Disable</command:verb>
			<command:noun>IEESEC</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Disabling IE Enhanced Security Configuration (IE ESC)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Disable-IEESEC</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>Users</maml:name>
					<maml:description>
						<maml:para>Apply for Users?</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>Admins</maml:name>
					<maml:description>
						<maml:para>Apply for Admins?</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>All</maml:name>
					<maml:description>
						<maml:para>Apply for Users and Admins?</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Users</maml:name>
				<maml:description>
					<maml:para>Apply for Users?</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Admins</maml:name>
				<maml:description>
					<maml:para>Apply for Admins?</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>True</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>All</maml:name>
				<maml:description>
					<maml:para>Apply for Users and Admins?</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Additional information about the function.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Disable-IEESEC -Admins</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Remove the IE Enhanced Security Configuration (IE ESC) for Admin Users</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Disable-IEESEC -Users</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Remove the IE Enhanced Security Configuration (IE ESC) for regular
Users</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Disable-IEESEC -All</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Remove the IE Enhanced Security Configuration (IE ESC) for Admin and
regular Users</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Disable-IEESEC -WhatIf</dev:code>
				<dev:remarks>
					<maml:para>What if: Performing the operation &quot;Set the new value: Disable&quot; on target &quot;IE
Enhanced Security Configuration&quot;.

Description
-----------
Show what would be changed without doing it!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Edit-HostsFile</command:name>
			<maml:description>
				<maml:para>Edit the Windows Host file</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Edit</command:verb>
			<command:noun>HostsFile</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Shortcut to quickly edit the Windows host File. Might be useful for
testing things without changing the regular DNS.

Handle with care!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Edit-HostsFile</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Additional information about the function.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Edit-HostsFile</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Opens the Editor configured within the VisualEditor variable to edit
the Windows Host file</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>ConvertTo-EscapeString</command:name>
			<maml:description>
				<maml:para>HTML on web pages uses tags and other special characters to define
the page.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>ConvertTo</command:verb>
			<command:noun>EscapeString</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>HTML on web pages uses tags and other special characters to define
the page.
To make sure text is not misinterpreted as HTML tags, you may want to
escape text and automatically convert any ambiguous text character in
an encoded format.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>ConvertTo-EscapeString</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="Message">
					<maml:name>String</maml:name>
					<maml:description>
						<maml:para>String to escape</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="Message">
				<maml:name>String</maml:name>
				<maml:description>
					<maml:para>String to escape</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This function has a companion: ConvertFrom-EscapedString
The companion reverses the escaped strings back to regular ones.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>ConvertTo-EscapeString -String &quot;Hello World&quot;</dev:code>
				<dev:remarks>
					<maml:para>Hello%20World

Description
-----------
In this example we escape the space in the string &quot;Hello World&quot;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>&quot;http://net-experts.net&quot; | ConvertTo-EscapeString</dev:code>
				<dev:remarks>
					<maml:para>http%3A%2F%2Fnet-experts.net

Description
-----------
In this example we escape the URL string</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>ConvertFrom-EscapedString</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>ConvertFrom-EscapedString</command:name>
			<maml:description>
				<maml:para>Convert an encoded (escaped) string back into the original
representation</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>ConvertFrom</command:verb>
			<command:noun>EscapedString</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>If you have a escaped String this function make it human readable
again.
Some Webservices returns strings an escaped format, so we convert an
encoded (escaped) string back into the original representation</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>ConvertFrom-EscapedString</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="Message">
					<maml:name>String</maml:name>
					<maml:description>
						<maml:para>String to un-escape</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="Message">
				<maml:name>String</maml:name>
				<maml:description>
					<maml:para>String to un-escape</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This function has a companion: ConvertTo-EscapeString
The companion escapes any given regular string.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>ConvertFrom-EscapedString -String &quot;Hello%20World&quot;</dev:code>
				<dev:remarks>
					<maml:para>Hello World

Description
-----------
In this example we un-escape the space in the string &quot;Hello%20World&quot;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>&quot;http%3A%2F%2Fnet-experts.net&quot; | ConvertFrom-EscapedString</dev:code>
				<dev:remarks>
					<maml:para>http://net-experts.net

Description
-----------
In this example we un-escape the masked (escaped) URL string</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>ConvertTo-EscapeString</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Expand-CompressedItem</command:name>
			<maml:description>
				<maml:para>Expands a compressed archive or container.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Expand</command:verb>
			<command:noun>CompressedItem</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Expands a compressed archive or container.

Currently only ZIP files are supported. Per default the contents of the
ZIP is expanded in the current directory.
If an item already exists, you will be visually prompted to overwrite
it, skip it, or to have a second copy of the item expanded.
This is due to the mechanism how this is implemented
(via Shell.Application).</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Expand-CompressedItem</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>InputObject</maml:name>
					<maml:description>
						<maml:para>Specifies the archive to expand. You can either pass this parameter as
a path and name to the archive or as a FileInfo object.
You can also pass an array of archives to the parameter.
In addition you can pipe a single archive or an array of archives to
this parameter as well.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Specifies the destination path Where-Object to expand the archive.
By default this is the current directory.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">DirectoryInfo</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>Format</maml:name>
					<maml:description>
						<maml:para>A description of the Format parameter.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>Specifies the archive to expand. You can either pass this parameter as
a path and name to the archive or as a FileInfo object.
You can also pass an array of archives to the parameter.
In addition you can pipe a single archive or an array of archives to
this parameter as well.</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the destination path Where-Object to expand the archive.
By default this is the current directory.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">DirectoryInfo</command:parameterValue>
				<dev:type>
					<maml:name>DirectoryInfo</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>$PWD.Path</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Format</maml:name>
				<maml:description>
					<maml:para>A description of the Format parameter.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>default</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>See module manifest for required software versions and dependencies at:
http://dfch.biz/biz/dfch/PS/System/Utilities/biz.dfch.PS.System.Utilities.psd1/</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Expands an archive &#39;mydata.zip&#39; to the current directory.</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Expand-CompressedItem mydata.zip</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Expand-CompressedItem mydata.zip -Confirm</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Expands an archive &#39;mydata.zip&#39; to the current directory and
prompts for every item to be extracted.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ChildItem Y:\Source\*.zip | Expand-CompressedItem -Path Z:\Destination -Format ZIP -Confirm</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
You can also pipe archives to the Cmdlet.
Enumerate all ZIP files in &#39;Y:\Source&#39; and pass them to the Cmdlet.
Each item to be extracted must be confirmed.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Expand-CompressedItem &quot;Y:\Source\data1.zip&quot;,&quot;Y:\Source\data2.zip&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Expands archives &#39;data1.zip&#39; and &#39;data2.zip&#39; to the current directory.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 5 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>@(&quot;Y:\Source\data1.zip&quot;,&quot;Y:\Source\data2.zip&quot;) | Expand-CompressedItem</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Expands archives &#39;data1.zip&#39; and &#39;data2.zip&#39; to the current directory.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Online Version: http://dfch.biz/biz/dfch/PS/System/Utilities/Expand-CompressedItem/</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Explore</command:name>
			<maml:description>
				<maml:para>Open explorer in this directory</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>Explore</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Open the Windows Explorer in this directory</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Explore</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="loc">
					<maml:name>Location</maml:name>
					<maml:description>
						<maml:para>Where to open the Windows Explorer, default is where the command is
called</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="loc">
				<maml:name>Location</maml:name>
				<maml:description>
					<maml:para>Where to open the Windows Explorer, default is where the command is
called</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>.</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Just a little helper function</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Explore</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Open the Windows Explorer in this directory</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Explore &#39;C:\scripts&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Open the Windows Explorer in &#39;C:\scripts&#39;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-FirewallExceptionRDP</command:name>
			<maml:description>
				<maml:para>Enable RDP via Windows Firewall</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>FirewallExceptionRDP</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Enable RDP via Windows Firewall</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-FirewallExceptionRDP</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-FirewallExceptionRDP</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Enable RDP via Windows Firewall</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-FirewallExceptionFileSharing</command:name>
			<maml:description>
				<maml:para>Enable File Sharing via Windows Firewall</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>FirewallExceptionFileSharing</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Enable File Sharing via Windows Firewall</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-FirewallExceptionFileSharing</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-FirewallExceptionFileSharing</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Enable File Sharing via Windows Firewall</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-Accelerators</command:name>
			<maml:description>
				<maml:para>Get a list of all .NET functions</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>Accelerators</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get a list of all .NET functions</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-Accelerators</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Accelerators</dev:code>
				<dev:remarks>
					<maml:para>Key                                                             Value
---                                                             -----
Alias
System.Management.Automation.AliasAttribute

Description
-----------
Get a list of all .NET functions</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Accelerators | Format-List</dev:code>
				<dev:remarks>
					<maml:para>Key   : Alias
Value : System.Management.Automation.AliasAttribute

Key   : AllowEmptyCollection
Value : System.Management.Automation.AllowEmptyCollectionAttribute

Description
-----------
Get a list of all .NET functions</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-AdminUser</command:name>
			<maml:description>
				<maml:para>Small function to see if we are Admin</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>AdminUser</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Check if the user have started the PowerShell Session as Admin</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-AdminUser</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Just a little helper function</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-AdminUser</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Return a boolean (True if the user is Admin and False if not)</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>if ( Get-AdminUser ) {Write-Output &quot;Hello Admin User&quot;}</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Prints &quot;Hello Admin User&quot; to the Console if the session is started
as Admin!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-ASCBanner</command:name>
			<maml:description>
				<maml:para>Create an ASC II Banner for a given String</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>ASCBanner</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Create an ASC II Banner for a given String</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-ASCBanner</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>InputString</maml:name>
					<maml:description>
						<maml:para></maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
					<maml:name>IsString</maml:name>
					<maml:description>
						<maml:para>Is this a String that should be dumped as ASC Art?</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
					<maml:name>ASCChar</maml:name>
					<maml:description>
						<maml:para>Character for the ASC Banner, * is the default</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Char</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>InputString</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>IsString</maml:name>
				<maml:description>
					<maml:para>Is this a String that should be dumped as ASC Art?</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>True</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>ASCChar</maml:name>
				<maml:description>
					<maml:para>Character for the ASC Banner, * is the default</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Char</command:parameterValue>
				<dev:type>
					<maml:name>Char</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>*</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Just for fun!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ASCBanner -InputString &#39;Welcome&#39; -IsString -ASCChar &#39;#&#39;</dev:code>
				<dev:remarks>
					<maml:para>#     #
#  #  #  ######  #        ####    ####   #    #  ######
#  #  #  #       #       #    #  #    #  ##  ##  #
#  #  #  #####   #       #       #    #  # ## #  #####
#  #  #  #       #       #       #    #  #    #  #
#  #  #  #       #       #    #  #    #  #    #  #
 ## ##   ######  ######   ####    ####   #    #  ######

Description
-----------
Create an ASC II Banner for a given String</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ASCBanner -InputString &#39;NET-Experts&#39; -IsString -ASCChar &#39;*&#39;</dev:code>
				<dev:remarks>
					<maml:para>*     * ******* *******         *******
**    * *          *            *        *    *  *****   ******  *****    *****
  ****
* *   * *          *            *         *  *   *    *  *       *    *     *
 *
*  *  * *****      *     *****  *****      **    *    *  *****   *    *     *
  ****
*   * * *          *            *          **    *****   *       *****      *
      *
*    ** *          *            *         *  *   *       *       *   *      *
 *    *
*     * *******    *            *******  *    *  *       ******  *    *     *
  ****

Description
-----------
Create an ASC II Banner for a given String</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-AvailibleDriveLetter</command:name>
			<maml:description>
				<maml:para>Get an available Drive Letter</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>AvailibleDriveLetter</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get an available Drive Letter, next free available or random</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-AvailibleDriveLetter</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>Random</maml:name>
					<maml:description>
						<maml:para>Get a random available Drive letter instead of the next free available</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Random</maml:name>
				<maml:description>
					<maml:para>Get a random available Drive letter instead of the next free available</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Found the base idea on PowerShellMagazine</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-AvailibleDriveLetter -Random</dev:code>
				<dev:remarks>
					<maml:para>O:

Description
-----------
Get an available Drive Letter (A Random selection of a free letter)</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-AvailibleDriveLetter -Random</dev:code>
				<dev:remarks>
					<maml:para>F:

Description
-----------
Get the next available unused Drive Letter (non random)</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Online version:</maml:linkText>
				<maml:uri>http://www.powershellmagazine.com/2012/01/12/find-an-unused-drive-letter/</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-BingSearch</command:name>
			<maml:description>
				<maml:para>Get the Bing results for a string</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>BingSearch</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get the latest Bin search results for a given string and presents it
on the console</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-BingSearch</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Search">
					<maml:name>searchstring</maml:name>
					<maml:description>
						<maml:para>String to search for on Bing</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Search">
				<maml:name>searchstring</maml:name>
				<maml:description>
					<maml:para>String to search for on Bing</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>$(throw &quot;Please specify a search string.&quot;)</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is a function that Michael found useful, so we adopted and
tweaked it a bit.

The original function was found somewhere on the Internet!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-BingSearch -searchstring:&quot;Joerg Hochwald&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Return the Bing Search Results for &quot;Joerg Hochwald&quot;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-BingSearch -searchstring:&quot;KreativSign GmbH&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Return the Bing Search Results for &quot;KreativSign GmbH&quot; as a formated
List (fl = Format-List)</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-EnvironmentVariables</command:name>
			<maml:description>
				<maml:para>Get and list all Environment Variables</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>EnvironmentVariables</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Dump all existing Environment Variables.
Sometimes this comes handy if you do something that changes them an
you want to compare the before and after values (See examples)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-EnvironmentVariables</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Initial Version...</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-EnvironmentVariables</dev:code>
				<dev:remarks>
					<maml:para># Get and list all Environment Variables</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$before = (Get-EnvironmentVariables)</dev:code>
				<dev:remarks>
					<maml:para>PS C:\&gt; Installer
PS C:\&gt; $after = (Get-EnvironmentVariables)
PS C:\&gt; Compare-Object -ReferenceObject $before -DifferenceObject $after

Description
-----------
Get and list all Environment Variables and save them to a variable.
Install, or do whatever you want to do... Something that might change
the Environment Variables.
Get and list all Environment Variables again and save them to a
variable.
Compare the 2 results...</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>(Get-EnvironmentVariables) | C:\scripts\PowerShell\export\before.txt</dev:code>
				<dev:remarks>
					<maml:para>PS C:\&gt; Installer
PS C:\&gt; reboot
PS C:\&gt; (Get-EnvironmentVariables) | C:\scripts\PowerShell\export\after.txt
PS C:\&gt; Compare-Object -ReferenceObject
&#39;C:\scripts\PowerShell\export\before.txt&#39; -DifferenceObject
&#39;C:\scripts\PowerShell\export\after.txt&#39;

Description
-----------
Get and list all Environment Variables and save them to a file.
Install, or do whatever you want to do... Something that might change
the Environment Variables.
Get and list all Environment Variables again and save them to another
file.
Compare the 2 results...</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-ExternalIP</command:name>
			<maml:description>
				<maml:para>Gets the current external IP address.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>ExternalIP</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Gets the current external IP address.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-ExternalIP</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ExternalIP</dev:code>
				<dev:remarks>
					<maml:para>84.132.180.143

Description
-----------
Gets the current external IP address.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Online version:</maml:linkText>
				<maml:uri>http://tools.bewoelkt.net/ip.php</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-FreeDiskSpace</command:name>
			<maml:description>
				<maml:para>Show the Free Disk Space of all Disks</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>FreeDiskSpace</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This is a Uni* DF like command that shows the available Disk space.
It&#39;s human readable (e.g. more like df -h)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-FreeDiskSpace</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Array</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Just a quick hack to make Powershell more Uni* like</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\scripts\PowerShell&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-FreeDiskSpace</dev:code>
				<dev:remarks>
					<maml:para>Name Disk Size(GB) Free (%)
---- ------------- --------
C          64         42%
D           2         84%

Description
-----------
Show the Free Disk Space of all Disks</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Idea http://www.computerperformance.co.uk/powershell/powershell_get_psdrive.htm</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-Hash</command:name>
			<maml:description>
				<maml:para>Dumps the MD5 hash for the given File</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>Hash</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Dumps the MD5 hash for the given File</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-Hash</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>File</maml:name>
					<maml:description>
						<maml:para>File or path to dump MD5 Hash for</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>Hash</maml:name>
					<maml:description>
						<maml:para>Specifies the cryptographic hash function to use for computing the
hash value of the contents of the specified file.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>File</maml:name>
				<maml:description>
					<maml:para>File or path to dump MD5 Hash for</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>Hash</maml:name>
				<maml:description>
					<maml:para>Specifies the cryptographic hash function to use for computing the
hash value of the contents of the specified file.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>MD5</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Re-factored to make it more flexible
(cryptographic hash is now a parameter)
This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-FileHash -File &#39;C:\scripts\PowerShell\PesterDocs.ps1&#39;</dev:code>
				<dev:remarks>
					<maml:para>069DF9587DB0A8D3BA6D8E840099A2D9

Description
-----------
Dumps the MD5 hash for the given File</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Hash -File &#39;C:\scripts\PowerShell\PesterDocs.ps1&#39; -Hash SHA1</dev:code>
				<dev:remarks>
					<maml:para>BC6B28A939CB3DBB82C9A7BDA5D80A191E8F06AE

Description
-----------
Dumps the SHA1 hash for the given File</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-HostFileEntry</command:name>
			<maml:description>
				<maml:para>Dumps the HOSTS File to the Console</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>HostFileEntry</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Dumps the HOSTS File to the Console
It dumps the WINDIR\System32\drivers\etc\hosts</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-HostFileEntry</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible
Sometimes I need to know what is set in the HOSTS File...
So I came up with that approach.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-HostFileEntry</dev:code>
				<dev:remarks>
					<maml:para>IP                                                              Hostname
--                                                              --------
10.211.55.123                                                   GOV13714W7
10.211.55.10                                                    jhwsrv08R2
10.211.55.125                                                   KSWIN07DEV

Description
-----------
Dumps the HOSTS File to the Console</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-HttpHead</command:name>
			<maml:description>
				<maml:para>Retrieve HTTP Headers from target web server</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>HttpHead</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This command will get the HTTP headers from the target web server and
test for the presence of various security related HTTP headers and
also display the cookie information.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-HttpHead</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="link">
					<maml:name>url</maml:name>
					<maml:description>
						<maml:para>The URL for inspection, e.g. https://www.linkedin.com</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="link">
				<maml:name>url</maml:name>
				<maml:description>
					<maml:para>The URL for inspection, e.g. https://www.linkedin.com</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on an idea of Dave Hardy, davehardy20@gmail.com @davehrdy20</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-HttpHead -url https://www.linkedin.com</dev:code>
				<dev:remarks>
					<maml:para>Header Information for https://www.linkedin.com

Description
-----------
Retrieve HTTPs Headers from www.linkedin.com</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-HttpHead -url http://net-experts.net</dev:code>
				<dev:remarks>
					<maml:para>Header Information for http://net-experts.net

Description
-----------
Retrieve HTTP Headers from net-experts.net</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Source: https://github.com/davehardy20/PowerShell-Scripts/blob/master/Get-HttpSecHead.ps1</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-IsSessionElevated</command:name>
			<maml:description>
				<maml:para>Is the Session started as admin (Elevated)</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>IsSessionElevated</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Quick Helper that Return if the session is started as admin (Elevated)
It returns a Boolean (True or False) and sets a global variable
(IsSessionElevated) with this Boolean value.
This might be useful for further use!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-IsSessionElevated</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Quick Helper that Return if the session is started as admin (Elevated)</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-IsSessionElevated</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
If the session is elevated</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-IsSessionElevated</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
If the session is not elevated</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-IsVirtual</command:name>
			<maml:description>
				<maml:para>Check if this is a Virtual Machine</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>IsVirtual</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>If this is a virtual System the Boolean is True, if not it is False</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-IsVirtual</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>The Function name is changed!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-IsVirtual</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
If this is a virtual System the Boolean is True, if not it is False</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-IsVirtual</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
If this is not a virtual System the Boolean is False, if so it is True</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-LocalIPAdresses</command:name>
			<maml:description>
				<maml:para>Show all local IP Addresses</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>LocalIPAdresses</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Show all local IP Addresses</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-LocalIPAdresses</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>LinkLocal</maml:name>
					<maml:description>
						<maml:para>Show IsIPv6LinkLocal?</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>LinkLocal</maml:name>
				<maml:description>
					<maml:para>Show IsIPv6LinkLocal?</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Additional information about the function.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LocalIPAdresses</dev:code>
				<dev:remarks>
					<maml:para>IPAddressToString                                          AddressFamily
-----------------                                          -------------
fe80::3db7:8507:3f9a:bb13%11                              InterNetworkV6
10.211.55.125                                               InterNetwork

Description
-----------
Show all local IP Addresses</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LocalIPAdresses | Format-List</dev:code>
				<dev:remarks>
					<maml:para>IPAddressToString : fe80::3db7:8507:3f9a:bb13%11
AddressFamily     : InterNetworkV6

IPAddressToString : 10.211.55.125
AddressFamily     : InterNetwork

Description
-----------
Show all local IP Addresses, formated</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LocalIPAdresses -LinkLocal | ConvertTo-Csv -NoTypeInformation</dev:code>
				<dev:remarks>
					<maml:para>&quot;IPAddressToString&quot;,&quot;AddressFamily&quot;,&quot;IsIPv6LinkLocal&quot;
&quot;fe80::3db7:8507:3f9a:bb13%11&quot;,&quot;InterNetworkV6&quot;,&quot;True&quot;
&quot;10.211.55.125&quot;,&quot;InterNetwork&quot;,&quot;False&quot;

Description
-----------
Show all local IP Addresses as CSV and shows IsIPv6LinkLocal info</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-NewAesKey</command:name>
			<maml:description>
				<maml:para>Get a AES Key</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>NewAesKey</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get a AES Key</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-NewAesKey</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Initial Version</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-NewAesKey</dev:code>
				<dev:remarks>
					<maml:para>3z38JJzHJghPYm9X95EP8Xbh2fuE8/rPxBi6N7mME9M=

Description
-----------
Get a AES Key</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-NewPassword</command:name>
			<maml:description>
				<maml:para>Generates a New password with varying length and Complexity,</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>NewPassword</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Generate a New Password for a User.  Defaults to 8 Characters
with Moderate Complexity.  Usage

GET-NEWPASSWORD or

GET-NEWPASSWORD $Length $Complexity

Where $Length is an integer from 1 to as high as you want
and $Complexity is an Integer from 1 to 4</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-NewPassword</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Length">
					<maml:name>PasswordLength</maml:name>
					<maml:description>
						<maml:para>Password Length</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="Level">
					<maml:name>Complexity</maml:name>
					<maml:description>
						<maml:para>Complexity Level</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Length">
				<maml:name>PasswordLength</maml:name>
				<maml:description>
					<maml:para>Password Length</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>8</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="Level">
				<maml:name>Complexity</maml:name>
				<maml:description>
					<maml:para>Complexity Level</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>3</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>The Complexity falls into the following setup for the Complexity level
1 - Pure lowercase Ascii
2 - Mix Uppercase and Lowercase Ascii
3 - Ascii Upper/Lower with Numbers
4 - Ascii Upper/Lower with Numbers and Punctuation</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-NewPassword</dev:code>
				<dev:remarks>
					<maml:para>zemermyya784vKx93

Description
-----------
Create New Password based on the defaults</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-NewPassword 9 1</dev:code>
				<dev:remarks>
					<maml:para>zemermyya

Description
-----------
Generate a Password of strictly Uppercase letters 9 letters long</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-NewPassword 5</dev:code>
				<dev:remarks>
					<maml:para>zemermyya784vKx93K2sqG

Description
-----------
Generate a Highly Complex password 5 letters long</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>$MYPASSWORD = (ConvertTo-SecureString (Get-NewPassword 8 2) -asplaintext -Force)</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Create a new 8 Character Password of Uppercase/Lowercase and store as
a Secure.String in Variable called $MYPASSWORD</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-Pause</command:name>
			<maml:description>
				<maml:para>Wait for user to press any key</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>Pause</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Shows a console message and waits for user to press any key.

Optional:
The message to display could be set by a command line parameter.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-Pause</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="Message">
					<maml:name>PauseMessage</maml:name>
					<maml:description>
						<maml:para>This optional parameter is the text that the function displays.
If this is not set, it uses a default text &quot;Press any key...&quot;</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="Message">
				<maml:name>PauseMessage</maml:name>
				<maml:description>
					<maml:para>This optional parameter is the text that the function displays.
If this is not set, it uses a default text &quot;Press any key...&quot;</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>Press any key...</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>PowerShell have no build in function like this</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>pause</dev:code>
				<dev:remarks>
					<maml:para>Display a console message and wait for user to press any key.
It shows the default Text &quot;Press any key...&quot;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>pause &quot;Please press any key&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Display a console message and wait for user to press any key.
It shows the Text &quot;Please press any key&quot;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>pause -PauseMessage &quot;Please press any key&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Display a console message and wait for user to press any key.
It shows the Text &quot;Please press any key&quot;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-PhoneticSpelling</command:name>
			<maml:description>
				<maml:para>Get the Phonetic Spelling for a given input String</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>PhoneticSpelling</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get the Phonetic Spelling for a given input String</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-PhoneticSpelling</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>Char</maml:name>
					<maml:description>
						<maml:para>Input that should be Phonetic Spelled</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Char[]</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>Char</maml:name>
				<maml:description>
					<maml:para>Input that should be Phonetic Spelled</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">Char[]</command:parameterValue>
				<dev:type>
					<maml:name>Char[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.Char[]</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Simple function to convert a string to Phonetic Spelling</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>(Get-PhoneticSpelling -Char &#39;Test&#39;).Table</dev:code>
				<dev:remarks>
					<maml:para>Char Phonetic
---- --------
   T Capital-Tango
   e Lowercase-Echo
   s Lowercase-Sierra
   t Lowercase-Tango

Description
-----------
Show the Input and Phonetic Spelling (table) for &#39;Test&#39;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>(Get-PhoneticSpelling -Char &#39;Test&#39;).PhoneticForm</dev:code>
				<dev:remarks>
					<maml:para>Capital-Tango  Lowercase-Echo  Lowercase-Sierra  Lowercase-Tango

Description
-----------
Convert &#39;Test&#39; to Phonetic Spelling</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-PreReqModules</command:name>
			<maml:description>
				<maml:para></maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>PreReqModules</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-PreReqModules</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para></maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-Quote</command:name>
			<maml:description>
				<maml:para>Get a random Quote from an Array</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>Quote</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get a random Quote from an Array of Quotes I like.

I like to put Quotes in slides and presentations, here is a collection
of whose I used...</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-Quote</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on an idea of Jeff Hicks

I just implemented this because it was fun to do so ;-)</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Quote</dev:code>
				<dev:remarks>
					<maml:para>*******************************************************************
*  The only real mistake is the one from which we learn nothing.  *
*                                                     Henry Ford  *
*******************************************************************

Description
-----------
Get a random Quote from an Array</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-RelativePath</command:name>
			<maml:description>
				<maml:para>Get a path to a file (or folder) relative to another folder</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>RelativePath</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Converts the FilePath to a relative path rooted in the specified Folder</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-RelativePath</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>Folder</maml:name>
					<maml:description>
						<maml:para>The folder to build a relative path from</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="1" aliases="FullName">
					<maml:name>FilePath</maml:name>
					<maml:description>
						<maml:para>The File (or folder) to build a relative path TO</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>Resolve</maml:name>
					<maml:description>
						<maml:para>If true, the file and folder paths must exist</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>Folder</maml:name>
				<maml:description>
					<maml:para>The folder to build a relative path from</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="1" aliases="FullName">
				<maml:name>FilePath</maml:name>
				<maml:description>
					<maml:para>The File (or folder) to build a relative path TO</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Resolve</maml:name>
				<maml:description>
					<maml:para>If true, the file and folder paths must exist</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-RelativePath ~\Documents\WindowsPowerShell\Logs\ ~\Documents\WindowsPowershell\Modules\Logger\log4net.xslt</dev:code>
				<dev:remarks>
					<maml:para>..\Modules\Logger\log4net.xslt

Description
-----------
Returns a path to log4net.xslt relative to the Logs folder</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-ScriptDirectory</command:name>
			<maml:description>
				<maml:para>Get the Directory of the Script that invokes this function</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>ScriptDirectory</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get the Directory of the Script that invokes this function</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-ScriptDirectory</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Just a quick helper to reduce the script header overhead</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>.\test.ps1</dev:code>
				<dev:remarks>
					<maml:para>C:\scripts\PowerShell

Description
-----------
Get the Directory of the Script that invokes this function</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-ShortDate</command:name>
			<maml:description>
				<maml:para>Get the Date as short String</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>ShortDate</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get the Date as short String</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-ShortDate</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>FilenameCompatibleFormat</maml:name>
					<maml:description>
						<maml:para>Make sure it is compatible to File Dates</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>FilenameCompatibleFormat</maml:name>
				<maml:description>
					<maml:para>Make sure it is compatible to File Dates</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Helper Function based on an idea of Robert D. Biddle</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ShortDate</dev:code>
				<dev:remarks>
					<maml:para>19.03.16

Description
-----------
Get the Date as short String</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ShortDate -FilenameCompatibleFormat</dev:code>
				<dev:remarks>
					<maml:para>19-03-16

Description
-----------
Get the Date as short String and replace the &#39;.&#39; with &#39;-&#39;.
Useful is you want to append this to filenames.

The dots are bad for such use cases!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Source https://github.com/RobBiddle/Get-ShortDateTime/blob/master/Get-ShortDateTime.psm1</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-Syntax</command:name>
			<maml:description>
				<maml:para>Get the syntax of a cmdlet, even if we have no help for it</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>Syntax</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Helper function to get the syntax of a alias or cmdlet,
even if we have no help for it</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-Syntax</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Command">
					<maml:name>cmdlet</maml:name>
					<maml:description>
						<maml:para>command-let that you want to check</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Command">
				<maml:name>cmdlet</maml:name>
				<maml:description>
					<maml:para>command-let that you want to check</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-syntax Get-syntax</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Get the syntax and parameters for the cmdlet &quot;Get-syntax&quot;.
Makes no sense at all, but this is just an example!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-TempFile</command:name>
			<maml:description>
				<maml:para>Creates a string with a temp file</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>TempFile</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Creates a string with a temp file</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-TempFile</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>Extension</maml:name>
					<maml:description>
						<maml:para>File Extension as a string.
The default is &quot;tmp&quot;</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>Extension</maml:name>
				<maml:description>
					<maml:para>File Extension as a string.
The default is &quot;tmp&quot;</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>tmp</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Helper to avoid &quot;System.IO.Path]::GetTempFileName()&quot; usage.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-TempFile</dev:code>
				<dev:remarks>
					<maml:para>C:\Users\josh\AppData\Local\Temp\332ddb9a-5e52-4687-aa01-1d67ab6ae2b1.tmp

Description
-----------
Returns a String of the Temp File with the extension TMP.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-TempFile -Extension txt</dev:code>
				<dev:remarks>
					<maml:para>C:\Users\josh\AppData\Local\Temp\332ddb9a-5e52-4687-aa01-1d67ab6ae2b1.txt

Description
-----------
Returns a String of the Temp File with the extension TXT</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$foo = (New-TempFile)</dev:code>
				<dev:remarks>
					<maml:para>PS C:\&gt; New-Item -Path $foo -Force -Confirm:$false
PS C:\&gt; Add-Content -Path:$LogPath -Value:&quot;Test&quot; -Encoding UTF8 -Force
C:\Users\josh\AppData\Local\Temp\d08cec6f-8697-44db-9fba-2c369963a017.tmp

Description
-----------
Creates a temp File:
C:\Users\josh\AppData\Local\Temp\d08cec6f-8697-44db-9fba-2c369963a017.tmp

And fill the newly created file with the String &quot;Test&quot;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Idea: http://powershell.com/cs/blogs/tips/archive/2015/10/15/creating-temporary-filenames.aspx</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-TimeStamp</command:name>
			<maml:description>
				<maml:para>Get-TimeStamp dumps a default Time-Stamp</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>TimeStamp</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get-TimeStamp dumps a default Time-Stamp in the following format:
yyyy-MM-dd HH:mm:ss</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-TimeStamp</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible
It is just a kind of a leftover: Used that within my old logging
functions a lot</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-TimeStamp</dev:code>
				<dev:remarks>
					<maml:para>2015-12-13 18:05:18

Description
-----------
Get a Time-Stamp as i would like it.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-TopProcesses</command:name>
			<maml:description>
				<maml:para>Make the PowerShell a bit more *NIX like</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>TopProcesses</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This is a PowerShell Version of the well known *NIX like TOP</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-TopProcesses</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>top</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Shows the top CPU consuming processes</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-Uptime</command:name>
			<maml:description>
				<maml:para>Show how long system has been running</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>Uptime</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Uni* like Uptime - The uptime utility displays the current time,
the length of time the system has been up</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-Uptime</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Uptime</dev:code>
				<dev:remarks>
					<maml:para>Uptime: 0 days, 2 hours, 11 minutes

Description
-----------
Returns the uptime of the system, the time since last reboot/startup</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-UUID</command:name>
			<maml:description>
				<maml:para>Generates a UUID String</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>UUID</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Generates a UUID String and is a uuidgen.exe replacement</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-UUID</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Just a little helper function</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-UUID</dev:code>
				<dev:remarks>
					<maml:para>a08cdabe-f598-4930-a537-80e7d9f15dc3

Description
-----------
Generates a UUID String</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-ValidateIsIP</command:name>
			<maml:description>
				<maml:para>Validates if input is an IP Address</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>ValidateIsIP</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Validates if input is an IP Address</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-ValidateIsIP</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>IP</maml:name>
					<maml:description>
						<maml:para>A string containing an IP address</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>IP</maml:name>
				<maml:description>
					<maml:para>A string containing an IP address</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Very easy helper function</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ValidateIsIP 10.211.55.125</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Validates if input is an IP Address</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ValidateIsIP -IP &#39;10.211.55.125&#39;</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Validates if input is an IP Address</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ValidateIsIP -IP &#39;fe80::3db7:8507:3f9a:bb13%11&#39;</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Validates if input is an IP Address</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-Whois</command:name>
			<maml:description>
				<maml:para>Script to retrieve WhoIs information from a list of domains</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>Whois</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This script will, by default, create a report of WhoIs information on
1 or more Internet domains. Not all Top-Level Domains support Whois
queries! e.g. .de (Germany) domains!

Report options are CSV, Json, XML, HTML, and object (default) output.
Dates in the CSV, Json, and HTML options are formatted for the culture
settings on the PC.
Columns in HTML report are also sortable, just click on the headers.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-Whois</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Domain</maml:name>
					<maml:description>
						<maml:para>One or more domain names to check. Accepts pipeline.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Path Where-Object the resulting HTML or CSV report will be saved.

Default is: C:\scripts\PowerShell\export</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>RedThresold</maml:name>
					<maml:description>
						<maml:para>If the number of days left before the domain expires falls below this
number the entire row will be highlighted in Red (HTML reports only).

Default is 30 (Days)</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>YellowThresold</maml:name>
					<maml:description>
						<maml:para>If the number of days left before the domain expires falls below this
number the entire row will be highlighted in Yellow (HTML reports only)

Default is 90 (Days)</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>GreyThresold</maml:name>
					<maml:description>
						<maml:para>If the number of days left before the domain expires falls below this
number the entire row will be highlighted in Grey (HTML reports only).

Default is 365 (Days)</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>OutputType</maml:name>
					<maml:description>
						<maml:para>Specify what kind of report you want.  Valid types are Json, XML,HTML,
CSV, or Object.

The default is Object.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Domain</maml:name>
				<maml:description>
					<maml:para>One or more domain names to check. Accepts pipeline.</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Path Where-Object the resulting HTML or CSV report will be saved.

Default is: C:\scripts\PowerShell\export</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>C:\scripts\PowerShell\export</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>RedThresold</maml:name>
				<maml:description>
					<maml:para>If the number of days left before the domain expires falls below this
number the entire row will be highlighted in Red (HTML reports only).

Default is 30 (Days)</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>30</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>YellowThresold</maml:name>
				<maml:description>
					<maml:para>If the number of days left before the domain expires falls below this
number the entire row will be highlighted in Yellow (HTML reports only)

Default is 90 (Days)</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>90</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GreyThresold</maml:name>
				<maml:description>
					<maml:para>If the number of days left before the domain expires falls below this
number the entire row will be highlighted in Grey (HTML reports only).

Default is 365 (Days)</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>365</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>OutputType</maml:name>
				<maml:description>
					<maml:para>Specify what kind of report you want.  Valid types are Json, XML,HTML,
CSV, or Object.

The default is Object.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>object</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on an idea of Martin Pugh (Martin Pugh)</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Whois -Domain &quot;NET-Experts.net&quot;,&quot;timberforest.com&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Will create object Whois output of the domain registration data.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Whois -Domain &quot;NET-Experts.net&quot; -OutputType json</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Will create Json Whois Report of the domain registration data.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Source: http://community.spiceworks.com/scripts/show/2809-whois-report-Get-whois-ps1</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-GnuGrep</command:name>
			<maml:description>
				<maml:para>File pattern searcher</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>GnuGrep</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This command emulates the well known (and loved?) GNU file
pattern searcher</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-GnuGrep</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="PaternString">
					<maml:name>pattern</maml:name>
					<maml:description>
						<maml:para>Pattern (STRING) - Mandatory</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="FFilter">
					<maml:name>filefilter</maml:name>
					<maml:description>
						<maml:para>File (STRING) - Mandatory</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="Recursive">
					<maml:name>r</maml:name>
					<maml:description>
						<maml:para>Recurse</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="IgnoreCase">
					<maml:name>i</maml:name>
					<maml:description>
						<maml:para>Ignore case</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="ListFilenames">
					<maml:name>l</maml:name>
					<maml:description>
						<maml:para>List filenames</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="PaternString">
				<maml:name>pattern</maml:name>
				<maml:description>
					<maml:para>Pattern (STRING) - Mandatory</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="FFilter">
				<maml:name>filefilter</maml:name>
				<maml:description>
					<maml:para>File (STRING) - Mandatory</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="Recursive">
				<maml:name>r</maml:name>
				<maml:description>
					<maml:para>Recurse</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="IgnoreCase">
				<maml:name>i</maml:name>
				<maml:description>
					<maml:para>Ignore case</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="ListFilenames">
				<maml:name>l</maml:name>
				<maml:description>
					<maml:para>List filenames</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-GnuGrep</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
File pattern searcher</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-GnuGrep</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
File pattern searcher</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Grant-PathFullPermission</command:name>
			<maml:description>
				<maml:para>Grant Full Access Permission for a given user to a given Path</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Grant</command:verb>
			<command:noun>PathFullPermission</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Grant Full Access Permission for a given user to a given Path</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Grant-PathFullPermission</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>path</maml:name>
					<maml:description>
						<maml:para>Path you want to grant the access to</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>user</maml:name>
					<maml:description>
						<maml:para>User you want to grant the access to</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Path you want to grant the access to</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>user</maml:name>
				<maml:description>
					<maml:para>User you want to grant the access to</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Additional information about the function.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Grant-PathFullPermission -path &#39;D:\dev&#39; -user &#39;John&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Grant Full Access Permission for a given user &#39;John&#39; to a given
Path &#39;D:\dev&#39;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-PowerHead</command:name>
			<maml:description>
				<maml:para>Display first lines of a file</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>PowerHead</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This filter displays the first count lines or bytes of each of the
specified files, or of the standard input if no files are specified.

If count is omitted it defaults to 10.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-PowerHead</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="FileName">
					<maml:name>File</maml:name>
					<maml:description>
						<maml:para>Filename</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="Counter">
					<maml:name>count</maml:name>
					<maml:description>
						<maml:para>A description of the count parameter, default is 10.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="FileName">
				<maml:name>File</maml:name>
				<maml:description>
					<maml:para>Filename</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="Counter">
				<maml:name>count</maml:name>
				<maml:description>
					<maml:para>A description of the count parameter, default is 10.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>10</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>head &#39;C:\scripts\info.txt&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Display first 10 lines of a file &#39;C:\scripts\info.txt&#39;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-PowerHead -File &#39;C:\scripts\info.txt&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Display first 10 lines of a file &#39;C:\scripts\info.txt&#39;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-PowerHead -File &#39;C:\scripts\info.txt&#39; -count &#39;2&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Display first 2 lines of a file &#39;C:\scripts\info.txt&#39;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-PowerHelp</command:name>
			<maml:description>
				<maml:para>Wrapper of Get-Help</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>PowerHelp</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This wrapper uses Get-Help -full for a given cmdlet and shows
everything paged. This is very much like the typical *nix like man</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-PowerHelp</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>man Get-item</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Shows the complete help text of the cmdlet &quot;Get-item&quot;, page by page</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-IgnoreSslTrust</command:name>
			<maml:description>
				<maml:para>This workaround completely disables SSL certificate checks</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>IgnoreSslTrust</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This workaround disables the SSL certificate trust checking.
This seems to be useful if you need to use self signed SSL certificates

But there is a string attached:
This is very dangerous.

And this is not a joke, it is dangerous, because you leave the door
wide open (and honestly it means completely open) for bad certificates,
hijacked certificates and even Man-In-The-middle attacks!

So really think twice before you use this in a production environment!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-IgnoreSslTrust</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Be carefull:
If you really need to disable the SSL Trust setting,
just use it for the calls you really need to!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-IgnoreSslTrust</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This workaround completely disables SSL certificate checks.
Do this only if you know what you are doing here!!!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Source: https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.servercertificatevalidationcallback.aspx
Source: https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback.aspx</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-NotIgnoreSslTrust</command:name>
			<maml:description>
				<maml:para>Enables the SSL certificate checks</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>NotIgnoreSslTrust</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This is a companion function for the usage of the
&quot;Set-IgnoreSslTrust&quot; function
It might be a great idea to disable the SSL Trust check for a single
call (If you real need to do it) via the &quot;Set-IgnoreSslTrust&quot;
function and then enable it directly after the call
via &quot;Set-NotIgnoreSslTrust&quot;</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-NotIgnoreSslTrust</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Do yourself a favor and use this function right after a call
without SSL Trust check!!!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-NotIgnoreSslTrust</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Enables the SSL certificate checks</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Source: https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.servercertificatevalidationcallback.aspx
Source: https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback.aspx</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Initialize-Modules</command:name>
			<maml:description>
				<maml:para>Initialize PowerShell Modules</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Initialize</command:verb>
			<command:noun>Modules</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Initialize PowerShell Modules</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Initialize-Modules</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Needs to be documented (Issue NETXDEV-23 opened)</maml:para>
			</maml:alert>
		</maml:alertSet>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-AnimatedSleep</command:name>
			<maml:description>
				<maml:para>Animated sleep</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>AnimatedSleep</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Takes the title and displays a looping animation for a given number of
seconds.
The animation will delete itself once it&#39;s finished,
to save on console scrolling.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-AnimatedSleep</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>seconds</maml:name>
					<maml:description>
						<maml:para>A number of seconds to sleep for</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2">
					<maml:name>title</maml:name>
					<maml:description>
						<maml:para>Some words to put next to the thing</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>seconds</maml:name>
				<maml:description>
					<maml:para>A number of seconds to sleep for</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>1</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2">
				<maml:name>title</maml:name>
				<maml:description>
					<maml:para>Some words to put next to the thing</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>Sleeping</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on an idea of Doug Kerwin</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-AnimatedSleep</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Will display a small animation for 1 second</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-AnimatedSleep 5</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Will display a small animation for 5 seconds</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-AnimatedSleep 10 &quot;Waiting for domain sync&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Will display &quot;Waiting for domain sync &quot; and a small animation for
10 seconds</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Source https://github.com/dwkerwin/powershell_profile/blob/master/autoload-scripts/vendor/sleepanim.ps1</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-baloonTip</command:name>
			<maml:description>
				<maml:para>Shows a Windows Balloon notification</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>baloonTip</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Shows a Windows Balloon notification</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-baloonTip</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Title</maml:name>
					<maml:description>
						<maml:para>Title of the Balloon Tip</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>Message</maml:name>
					<maml:description>
						<maml:para>Message of the Balloon Tip</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2">
					<maml:name>Icon</maml:name>
					<maml:description>
						<maml:para>Type for the Balloon</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Title</maml:name>
				<maml:description>
					<maml:para>Title of the Balloon Tip</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>Information</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>Message</maml:name>
				<maml:description>
					<maml:para>Message of the Balloon Tip</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>Message...</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2">
				<maml:name>Icon</maml:name>
				<maml:description>
					<maml:para>Type for the Balloon</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>Information</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Tested with Windows 7, Windows 8/8.1 and Windows Server 2012/2012R2</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-baloonTip</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Show a windows Balloon with the Title &quot;Title&quot; and the Text &quot;Message...&quot;
as &quot;Information&quot;.

This is the default values for everything.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-baloonTip -Title &#39;Diskspace!!!&#39; -Message &#39;Diskspace on c: is low&#39; -Icon &#39;Exclamation&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This shows an Balloon with the Title &quot;Diskspace!!!&quot;,
the message is &quot;Diskspace on c: is low&quot; as &quot;Exclamation&quot;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-baloonTip -Title &#39;Reconnect?&#39; -Message &#39;Should is reconnect to Office 365???&#39; -Icon &#39;Question&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This shows an Balloon with the Title &quot;Reconnect?&quot;,
the message is &quot;Should is reconnect to Office 365???&quot; as &quot;Question&quot;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-CreateMissingRegistryDrives</command:name>
			<maml:description>
				<maml:para>Create Missing Registry Drives</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>CreateMissingRegistryDrives</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Create Missing Registry Drives</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-CreateMissingRegistryDrives</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on an idea of ALIENQuake</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-CreateMissingRegistryDrives</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Create Missing Registry Drives</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>ALIENQuake https://github.com/ALIENQuake/WindowsPowerShell</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-VisualEditor</command:name>
			<maml:description>
				<maml:para>Wrapper to edit files</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>VisualEditor</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This is a quick wrapper that edits files with editor from the
VisualEditor variable</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-VisualEditor</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="File">
					<maml:name>args</maml:name>
					<maml:description>
						<maml:para>Arguments</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="File">
				<maml:name>args</maml:name>
				<maml:description>
					<maml:para>Arguments</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-VisualEditor example.txt</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Invokes Note++ or ISE and edits &quot;example.txt&quot;.
This is possible, even if the File does not exists...
The editor should ask you if it should create it for you</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-VisualEditor</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Invokes Note++ or ISE without opening a file</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Convert-IPtoDecimal</command:name>
			<maml:description>
				<maml:para>Converts an IP address to decimal.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Convert</command:verb>
			<command:noun>IPtoDecimal</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Converts an IP address to decimal value.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Convert-IPtoDecimal</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="IP">
					<maml:name>IPAddress</maml:name>
					<maml:description>
						<maml:para>An IP Address you want to check</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="IP">
				<maml:name>IPAddress</maml:name>
				<maml:description>
					<maml:para>An IP Address you want to check</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Management.Automation.PSObject</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Sometimes I need to have that info, so I decided it would be great
to have a functions who do the job!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Convert-IPtoDecimal -IPAddress &#39;127.0.0.1&#39;,&#39;192.168.0.1&#39;,&#39;10.0.0.1&#39;</dev:code>
				<dev:remarks>
					<maml:para>decimal        IPAddress
-------        ---------
2130706433    127.0.0.1
3232235521    192.168.0.1
167772161    10.0.0.1

Description
-----------
Converts an IP address to decimal.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Convert-IPtoDecimal &#39;127.0.0.1&#39;,&#39;192.168.0.1&#39;,&#39;10.0.0.1&#39;</dev:code>
				<dev:remarks>
					<maml:para>decimal        IPAddress
-------        ---------
2130706433    127.0.0.1
3232235521    192.168.0.1
167772161    10.0.0.1

Description
-----------
Converts an IP address to decimal.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>&#39;127.0.0.1&#39;,&#39;192.168.0.1&#39;,&#39;10.0.0.1&#39; |  Convert-IPtoDecimal</dev:code>
				<dev:remarks>
					<maml:para>decimal        IPAddress
-------        ---------
2130706433    127.0.0.1
3232235521    192.168.0.1
167772161    10.0.0.1

Description
-----------
Converts an IP address to decimal.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Check-IPaddress</command:name>
			<maml:description>
				<maml:para>Check if a given IP Address seems to be valid</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Check</command:verb>
			<command:noun>IPaddress</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Check if a given IP Address seems to be valid.
We use the .NET function to do so. This is not 100% reliable,
but is enough most times.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Check-IPaddress</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="IP">
					<maml:name>IPAddress</maml:name>
					<maml:description>
						<maml:para>An IP Address you want to check</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="IP">
				<maml:name>IPAddress</maml:name>
				<maml:description>
					<maml:para>An IP Address you want to check</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Check-IPaddress -IPAddress &#39;10.10.16.10&#39;</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Check if a given IP Address seems to be valid</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Check-IPaddress -IPAddress &#39;010.010.016.010&#39;</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Check if a given IP Address seems to be valid</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Check-IPaddress -IPAddress &#39;10.10.16.01O&#39;</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
Check if a given IP Address seems to be valid</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-NtpTime</command:name>
			<maml:description>
				<maml:para>Get the NTP Time from a given Server</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>NtpTime</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get the NTP Time from a given Server.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-NtpTime</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="NETServer">
					<maml:name>Server</maml:name>
					<maml:description>
						<maml:para>NTP Server to use. The default is de.pool.ntp.org</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="NETServer">
				<maml:name>Server</maml:name>
				<maml:description>
					<maml:para>NTP Server to use. The default is de.pool.ntp.org</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>de.pool.ntp.org</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.DateTime</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This sends an NTP time packet to the specified NTP server and reads
back the response.
The NTP time packet from the server is decoded and returned.

Note: this uses NTP (rfc-1305: http://www.faqs.org/rfcs/rfc1305.html)
on UDP 123.
Because the function makes a single call to a single server this is
strictly a SNTP client (rfc-2030).
Although the SNTP protocol data is similar (and can be identical) and
the clients and servers are often unable to distinguish the difference.
Where-Object SNTP differs is that is does not accumulate historical
data (to enable statistical averaging) and does not retain a session
between client and server.

An alternative to NTP or SNTP is to use Daytime (rfc-867) on TCP
port 13 – although this is an old protocol and is not supported
by all NTP servers.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\scripts\PowerShell&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-NtpTime -Server &#39;de.pool.ntp.org&#39;</dev:code>
				<dev:remarks>
					<maml:para>5. April 2016 00:58:59

Description
-----------
Get the NTP Time from a given Server</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Source: https://chrisjwarwick.wordpress.com/2012/08/26/getting-ntpsntp-network-time-with-powershell/</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-AppendClassPath</command:name>
			<maml:description>
				<maml:para>Append a given path to the Class Path</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>AppendClassPath</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Appends a given path to the Java Class Path.
Useful if you still need that old Java crap!

By the way: I hate Java!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-AppendClassPath</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>append-classpath &quot;.&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Include the directory Where-Object you are to the Java Class Path</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-JavaLove</command:name>
			<maml:description>
				<maml:para>Set the JAVAHOME Variable to use JDK and/or JRE instances withing the
Session</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>JavaLove</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>You are still using Java Stuff?
OK... Your choice, so we do you the favor and create/fill the
variable JAVAHOME based on the JDK/JRE that we found.
It also append the Info to the PATH variable to make things easier
for you.
But think about dropping the buggy Java crap as soon as you can.
Java is not only buggy, there are also many Security issues with it!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-JavaLove</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>JavaLove</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Find the installed JDK and/or JRE version and crate the JDK_HOME
and JAVA_HOME variables for you.
It also appends the Path to the PATH  and CLASSPATH variable to make
it easier for you.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-PowerLL</command:name>
			<maml:description>
				<maml:para>Quick helper to make my PowerShell a bit more like *nix</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>PowerLL</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Everyone ever used a modern Unix and/or Linux system knows and love
the colored output of LL

This function is hack to emulate that on PowerShell.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-PowerLL</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Directory">
					<maml:name>dir</maml:name>
					<maml:description>
						<maml:para>Show the content of this Directory</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="ShowAll">
					<maml:name>all</maml:name>
					<maml:description>
						<maml:para>Show all files, included the hidden ones!</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Directory">
				<maml:name>dir</maml:name>
				<maml:description>
					<maml:para>Show the content of this Directory</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>.</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="ShowAll">
				<maml:name>all</maml:name>
				<maml:description>
					<maml:para>Show all files, included the hidden ones!</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Reload-PesterModule</command:name>
			<maml:description>
				<maml:para>Load Pester Module</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Reload</command:verb>
			<command:noun>PesterModule</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Load the Pester PowerShell Module to the Global context.
Pester is a Mockup, Unit Test and Function Test Module for PowerShell</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Reload-PesterModule</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Pester Module must be installed</maml:para>
			</maml:alert>
		</maml:alertSet>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Pester: https://github.com/pester/Pester</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-MakeDirectory</command:name>
			<maml:description>
				<maml:para>Wrapper of New-Item</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>MakeDirectory</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Wrapper of New-Item to create a directory</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-MakeDirectory</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="dir">
					<maml:name>Directory</maml:name>
					<maml:description>
						<maml:para>Directory name to create</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="dir">
				<maml:name>Directory</maml:name>
				<maml:description>
					<maml:para>Directory name to create</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>mkdir test</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Creates a directory with the name &quot;test&quot;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Update-SysInfo</command:name>
			<maml:description>
				<maml:para>Update Information about the system</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Update</command:verb>
			<command:noun>SysInfo</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This function updates the informations about the systems it runs on</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Update-SysInfo</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Update-SysInfo</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Update Information about the system, no output!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Based on an idea found here: https://github.com/michalmillar/ps-motd/blob/master/Get-MOTD.ps1</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Clean-SysInfo</command:name>
			<maml:description>
				<maml:para>Companion for Update-SysInfo</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Clean</command:verb>
			<command:noun>SysInfo</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Cleanup for variables from the Update-SysInfo function</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Clean-SysInfo</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Clean-SysInfo</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Cleanup for variables from the Update-SysInfo function</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-MOTD</command:name>
			<maml:description>
				<maml:para>Displays system information to a host.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>MOTD</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Get-MOTD cmdlet is a system information tool written in PowerShell.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-MOTD</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>inspired by this:
https://github.com/michalmillar/ps-motd/blob/master/Get-MOTD.ps1

The Microsoft Logo, PowerShell, Windows and some others are registered
Trademarks by Microsoft Corporation.

I do not own them, i just use them here :-)

I moved some stuff in a separate function to make it reusable</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-MOTD</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Display the colorful Message of the Day with a Microsoft Logo and some
system infos</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-SysInfo</command:name>
			<maml:description>
				<maml:para>Displays Information about the system</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>SysInfo</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Displays Information about the system it is started on</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-SysInfo</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on an idea found here:
https://github.com/michalmillar/ps-motd/blob/master/Get-MOTD.ps1</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-SysInfo</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Display some system infos</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-MyLS</command:name>
			<maml:description>
				<maml:para>Wrapper for Get-ChildItem</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>MyLS</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This wrapper for Get-ChildItem shows all directories and files
(even hidden ones)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-MyLS</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Location">
					<maml:name>loc</maml:name>
					<maml:description>
						<maml:para>A description of the loc parameter.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Location">
				<maml:name>loc</maml:name>
				<maml:description>
					<maml:para>A description of the loc parameter.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>.</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>myls</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Show the content of the directory Where-Object you are</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>myls c:\</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Show the content of &quot;c:\&quot;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>New-BasicAuthHeader</command:name>
			<maml:description>
				<maml:para>Create a basic authentication header for Web requests</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>New</command:verb>
			<command:noun>BasicAuthHeader</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Create a basic authentication header for Web requests, often used
in Rest API Calls (Works perfect for Invoke-RestMethod calls)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>New-BasicAuthHeader</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>user</maml:name>
					<maml:description>
						<maml:para>User name to use</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2">
					<maml:name>password</maml:name>
					<maml:description>
						<maml:para>Password to use</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>user</maml:name>
				<maml:description>
					<maml:para>User name to use</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2">
				<maml:name>password</maml:name>
				<maml:description>
					<maml:para>Password to use</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Very basic for now!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-BasicAuthHeader -user &#39;apiuser&#39; -password &#39;password&#39;</dev:code>
				<dev:remarks>
					<maml:para>YXBpdXNlcjpwYXNzd29yZA==

Description
-----------
Create a valid password and Auth header, perfect for REST Web Services</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-RestMethod -Uri &#39;https://service.contoso.com/api/auth&#39; -Method &#39;Get&#39; -Headers @{Authorization=(&quot;Basic {0}&quot; -f (New-BasicAuthHeader &#39;apiuser&#39; &#39;password&#39;))}</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Call the URI &#39;https://service.contoso.com/api/auth&#39; with an basic
authentication header for the given credentials.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>New-Gitignore</command:name>
			<maml:description>
				<maml:para>Create a new .gitignore file with my default settings</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>New</command:verb>
			<command:noun>Gitignore</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Downloads my default .gitignore from GitHub and creates it within
the directory from Where-Object this function is called.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>New-Gitignore</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Source</maml:name>
					<maml:description>
						<maml:para>The Source for the .gitignore</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>The Source for the .gitignore</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>https://raw.githubusercontent.com/jhochwald/MyPowerShellStuff/master/.gitignore</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Additional information about the function.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\scripts\PowerShell\test&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-Gitignore</dev:code>
				<dev:remarks>
					<maml:para>Creating C:\scripts\PowerShell\test\.gitignore
C:\scripts\PowerShell\test\.gitignore successfully created.

Description
-----------
The default: We downloaded the default .gitignore from GitHub</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\scripts\PowerShell\test\&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-Gitignore</dev:code>
				<dev:remarks>
					<maml:para>WARNING: You already have a .gitignore in this dir.
Fetch a fresh one from GitHub?
Removing existing .gitignore.
Creating C:\scripts\PowerShell\test\.gitignore
C:\scripts\PowerShell\test\.gitignore successfully created.

Description
-----------
In this example we had an existing .gitignore and downloaded the
default one from GitHub...</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\scripts\PowerShell\test&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-Gitignore</dev:code>
				<dev:remarks>
					<maml:para>WARNING: You already have a .gitignore in this dir.
Fetch a fresh one from GitHub?
Existing .gitignore will not be changed.

Description
-----------
In this Example we had an existing .gitignore and we decided to
stay with em!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>SourceFile https://raw.githubusercontent.com/jhochwald/MyPowerShellStuff/master/.gitignore</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>New-Guid</command:name>
			<maml:description>
				<maml:para>Creates a new Guid object and displays it to the screen</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>New</command:verb>
			<command:noun>Guid</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Uses static System.Guid.NewGuid() method to create a new Guid object</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>New-Guid</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a quick &amp; dirty helper function to generate GUID&#39;s
this is neat if you need a new GUID for an PowerShell Module.

If you have Visual Studio, you might find this function useless!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-Guid</dev:code>
				<dev:remarks>
					<maml:para>fd6bd476-db80-44e7-ab34-47437adeb8e3

Description
-----------
Creates a new Guid object and displays its GUI to the screen</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Open-InternetExplorer</command:name>
			<maml:description>
				<maml:para>Workaround for buggy internetexplorer.application</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Open</command:verb>
			<command:noun>InternetExplorer</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This Workaround is neat, because the native implementation is unable to
bring the new Internet Explorer Window to the front (give em focus).
It needs his companion: Add-NativeHelperType</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Open-InternetExplorer</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Url</maml:name>
					<maml:description>
						<maml:para>The URL you would like to open in Internet Explorer</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="fg">
					<maml:name>Foreground</maml:name>
					<maml:description>
						<maml:para>Should the new Internet Explorer start in the foreground?

The default is YES.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="fs">
					<maml:name>FullScreen</maml:name>
					<maml:description>
						<maml:para>Should the new Internet Explorer Session start in Full Screen

The Default is NO</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Url</maml:name>
				<maml:description>
					<maml:para>The URL you would like to open in Internet Explorer</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>http://support.NET-Experts.net</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="fg">
				<maml:name>Foreground</maml:name>
				<maml:description>
					<maml:para>Should the new Internet Explorer start in the foreground?

The default is YES.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>True</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="fs">
				<maml:name>FullScreen</maml:name>
				<maml:description>
					<maml:para>Should the new Internet Explorer Session start in Full Screen

The Default is NO</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>It needs his companion: Add-NativeHelperType
Based on a snippet from Crippledsmurf</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Open-InternetExplorer -Url &#39;http://net-experts.net&#39; -FullScreen -InForeground</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Start Internet Explorer in Foreground and fullscreen,
it also opens http://net-experts.net</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Open-InternetExplorer -Url &#39;https://portal.office.com&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Start Internet Explorer in Foreground with the URL
https://portal.office.com</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Source: http://superuser.com/questions/848201/focus-ie-window-in-powershell</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Info: https://msdn.microsoft.com/en-us/library/windows/desktop/ms633539(v=vs.85).aspx</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>PoSHModuleLoader</command:name>
			<maml:description>
				<maml:para>Loads all Script modules</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>PoSHModuleLoader</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Loads all Script modules</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>PoSHModuleLoader</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Old function that we no longer use</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>PoSHModuleLoader</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Loads all Script modules</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-sessionfile</command:name>
			<maml:description>
				<maml:para>Restore PowerShell Session information</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>sessionfile</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This command shows many PowerShell Session informations.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-sessionfile</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Session">
					<maml:name>sessionName</maml:name>
					<maml:description>
						<maml:para>Name of the Session you would like to dump</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Session">
				<maml:name>sessionName</maml:name>
				<maml:description>
					<maml:para>Name of the Session you would like to dump</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-sessionfile $O365Session</dev:code>
				<dev:remarks>
					<maml:para>C:\Users\adm.jhochwald\AppData\Local\Temp\[PSSession]Session2

Description
-----------
Returns the Session File for a given Session</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-sessionfile</dev:code>
				<dev:remarks>
					<maml:para>C:\Users\adm.jhochwald\AppData\Local\Temp\

Description
-----------
Returns the Session File of the running session, cloud be none!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>export-session</command:name>
			<maml:description>
				<maml:para>Export PowerShell session info to a file</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>export</command:verb>
			<command:noun>session</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This is a (very) poor man approach to save some session infos

Our concept of session is simple and only considers:
- history
- The export-session

But still can be very handy and useful. If you type in some sneaky
commands, or some very complex things and you did not copied these to
another file or script it can save you a lot of time if you need to
do it again (And this is often the case)

Even if you just want to dump it quick to copy it some when later to
a documentation or script this might be useful.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>export-session</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>sessionName</maml:name>
					<maml:description>
						<maml:para></maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>sessionName</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>&quot;session-$(Get-date -f yyyyMMddhh)&quot;</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>export-session</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Export the history and the export-session to a default File like
&#39;session-2016040512.ps1session&#39;, dynamically generated based on
Time/date</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>export-session -sessionName &#39;C:\scripts\mySession&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Export the history and the export-session to the File
&#39;C:\scripts\mySession.ps1session&#39;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>import-session</command:name>
			<maml:description>
				<maml:para>Import a PowerShell session info from file</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>import</command:verb>
			<command:noun>session</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This is a (very) poor man approach to restore some session infos

Our concept of session is simple and only considers:
- history
- The current directory

But still can be very handy and useful. If you type in some sneaky
commands, or some very complex things and you did not copied these to
another file or script it can save you a lot of time if you need
to do it again (And this is often the case)

Even if you just want to dump it quick to copy it some when later to a
documentation or script this might be useful.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>import-session</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Session">
					<maml:name>sessionName</maml:name>
					<maml:description>
						<maml:para></maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Session">
				<maml:name>sessionName</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>import-session -sessionName &#39;C:\scripts\mySession&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Import the history and the export-session from the File
&#39;C:\scripts\mySession.ps1session&#39;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Send-Pushover</command:name>
			<maml:description>
				<maml:para>Sends a push message via Pushover</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Send</command:verb>
			<command:noun>Pushover</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>We established a lot of automated messaging and push services,
Pushover was missing!

We do not use Pushover that much, but sometimes it is just nice to
have the function ready...</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Send-Pushover</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>User</maml:name>
					<maml:description>
						<maml:para>The user/group key (not e-mail address) of your user (or you),
viewable when logged into our Pushover dashboard</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
					<maml:name>Message</maml:name>
					<maml:description>
						<maml:para>Your message, can be HTML like formated</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
					<maml:name>token</maml:name>
					<maml:description>
						<maml:para>Your Pushover application API token</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>device</maml:name>
					<maml:description>
						<maml:para>Your device name to send the message directly to that device,
rather than all of the devices (multiple devices may be separated by
a comma). You can use Get-PushoverUserDeviceInfo to get a list of
 all registered devices.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>title</maml:name>
					<maml:description>
						<maml:para>Your message title, otherwise your app name is used</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>url</maml:name>
					<maml:description>
						<maml:para>A supplementary URL to show with your message</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>url_title</maml:name>
					<maml:description>
						<maml:para>A title for your supplementary URL, otherwise just the URL is shown</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>priority</maml:name>
					<maml:description>
						<maml:para>The Push priority (-2 to +2)</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>sound</maml:name>
					<maml:description>
						<maml:para>The name of one of the sounds supported by device clients to override
the user&#39;s default sound choice</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>User</maml:name>
				<maml:description>
					<maml:para>The user/group key (not e-mail address) of your user (or you),
viewable when logged into our Pushover dashboard</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Message</maml:name>
				<maml:description>
					<maml:para>Your message, can be HTML like formated</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>token</maml:name>
				<maml:description>
					<maml:para>Your Pushover application API token</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>device</maml:name>
				<maml:description>
					<maml:para>Your device name to send the message directly to that device,
rather than all of the devices (multiple devices may be separated by
a comma). You can use Get-PushoverUserDeviceInfo to get a list of
 all registered devices.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>title</maml:name>
				<maml:description>
					<maml:para>Your message title, otherwise your app name is used</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>url</maml:name>
				<maml:description>
					<maml:para>A supplementary URL to show with your message</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>url_title</maml:name>
				<maml:description>
					<maml:para>A title for your supplementary URL, otherwise just the URL is shown</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>priority</maml:name>
				<maml:description>
					<maml:para>The Push priority (-2 to +2)</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>0</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>sound</maml:name>
				<maml:description>
					<maml:para>The name of one of the sounds supported by device clients to override
the user&#39;s default sound choice</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>pushover</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on our Send-SlackChat function</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-Pushover -User &quot;USERTOKEN&quot; -token &quot;APPTOKEN&quot; -Message &quot;Test&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Send the message &quot;Test&quot; to all your devices. The App Name is
displayed a title of the push</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-Pushover -User &quot;USERTOKEN&quot; -token &quot;APPTOKEN&quot; -Message &quot;Test&quot; -device &quot;Josh-iPadPro&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Send the message &quot;Test&quot; to the device with the name &quot;Josh-iPadPro&quot;.
The App Name is displayed a title of the push</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-Pushover -User &quot;USERTOKEN&quot; -token &quot;APPTOKEN&quot; -Message &quot;Test&quot; -title &quot;Hello!&quot; -sound &quot;cosmic&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Send the message &quot;Test&quot; to all your devices. It will have the
Title &quot;Hello!&quot; and use the notification sound &quot;cosmic&quot;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-Pushover -User &quot;USERTOKEN&quot; -token &quot;APPTOKEN&quot; -Message &quot;Nice URL for you&quot; -title &quot;Hello!&quot; -url &quot;http://net-experts.net&quot; -url_title &quot;My Site&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Send the message &quot;Nice URL for you&quot; with the title &quot;Hello!&quot; to all
your devices.
The Push contains a link to &quot;http://net-experts.net&quot; with the
URL title &quot;My Site&quot;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Get-PushoverUserDeviceInfo</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Info: https://pushover.net</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>API: https://pushover.net/api</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Send-SlackChat</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-PushoverUserDeviceInfo</command:name>
			<maml:description>
				<maml:para>Retrieves a list of registered devices with Pushover</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>PushoverUserDeviceInfo</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Perfect in combination with the Send-Pushover command to send a
notification using the &quot;device&quot; parameter of Send-Pushover</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-PushoverUserDeviceInfo</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>User</maml:name>
					<maml:description>
						<maml:para>The user/group key (not e-mail address) of your user (or you),
viewable when logged into our Pushover dashboard</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
					<maml:name>token</maml:name>
					<maml:description>
						<maml:para>Your Pushover application API token</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>User</maml:name>
				<maml:description>
					<maml:para>The user/group key (not e-mail address) of your user (or you),
viewable when logged into our Pushover dashboard</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>token</maml:name>
				<maml:description>
					<maml:para>Your Pushover application API token</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-PushoverUserDeviceInfo -User &quot;John&quot; -token &quot;APPTOKEN&quot;</dev:code>
				<dev:remarks>
					<maml:para>John-Mac
John-iPadMini
John-iPhone5S
John-S5

Description
-----------
Get all Devices for User &#39;John&#39;</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Send-Pushover</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Info: https://pushover.net</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>API: https://pushover.net/api</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Send-SlackChat</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Reload-Module</command:name>
			<maml:description>
				<maml:para>Reloads one, or more, PowerShell Module(s)</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Reload</command:verb>
			<command:noun>Module</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This function forces an unload and then load the given PowerShell
Module again.

There is no build-in Re-Load function in PowerShell, at least yet!

If you want to reload more then one Module at the time,
just separate them by comma (Usual in PowerShell for multiple-values)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Reload-Module</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="ModuleName">
					<maml:name>Module</maml:name>
					<maml:description>
						<maml:para>Name one, or more, PowerShell Module(s) to reload</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="ModuleName">
				<maml:name>Module</maml:name>
				<maml:description>
					<maml:para>Name one, or more, PowerShell Module(s) to reload</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Needs to be documented</maml:para>
			</maml:alert>
		</maml:alertSet>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Remove-ItemSafely</command:name>
			<maml:description>
				<maml:para>Deletes files and folders into the Recycle Bin</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Remove</command:verb>
			<command:noun>ItemSafely</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Deletes the file or folder as if it had been done via File Explorer.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Remove-ItemSafely</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>The path to the file/files or folder/folders</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>DeletePermanently</maml:name>
					<maml:description>
						<maml:para>Bypasses the recycle bin, deleting the file or folder permanently</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>The path to the file/files or folder/folders</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DeletePermanently</maml:name>
				<maml:description>
					<maml:para>Bypasses the recycle bin, deleting the file or folder permanently</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Early Beta Version</maml:para>
			</maml:alert>
		</maml:alertSet>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Based on http://stackoverflow.com/a/502034/2688</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Remove-TempFiles</command:name>
			<maml:description>
				<maml:para>Removes all temp files older then a given time period</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Remove</command:verb>
			<command:noun>TempFiles</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Removes all temp files older then a given time period from the system or the
user environment.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Remove-TempFiles</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
					<maml:name>Month</maml:name>
					<maml:description>
						<maml:para>Remove temp files older then X month.
The default is 1</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int64</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2">
					<maml:name>Context</maml:name>
					<maml:description>
						<maml:para>Remove the System or User Temp Files?
The default is All.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Month</maml:name>
				<maml:description>
					<maml:para>Remove temp files older then X month.
The default is 1</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int64</command:parameterValue>
				<dev:type>
					<maml:name>Int64</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>1</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2">
				<maml:name>Context</maml:name>
				<maml:description>
					<maml:para>Remove the System or User Temp Files?
The default is All.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>All</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Adopted from a snippet found on Powershell.com</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Remove-TempFiles -Confirm:$false</dev:code>
				<dev:remarks>
					<maml:para>TotalSize                     Retrieved                   TotalSizeMB
        RetrievedMB
---------                     ---------                   -----------
        -----------
518485778                     417617315                         494,5
              398,3

Description
-----------
Removes all &#39;User&#39; and &#39;System&#39; temp file older then one month,
without asking if you are sure! This could be dangerous...</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Remove-TempFiles -Confirm:$false</dev:code>
				<dev:remarks>
					<maml:para>WARNING: The process cannot access the file
&#39;C:\Users\josh\AppData\Local\Temp\FXSAPIDebugLogFile.txt&#39; because it is being
used by another process. - Line Number: 96

TotalSize                       Retrieved                     TotalSizeMB
              RetrievedMB
---------                       ---------                     -----------
              -----------
264147489                       214105710                           251,9
                    204,2

Description
-----------
Removes all &#39;User&#39; and &#39;System&#39; temp file older then one month,
without asking if you are sure! This could be dangerous...

One file is locked by another process! Just a warning will show up,
the cleanup will continue.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Remove-TempFiles -Month 3 -Context &#39;System&#39;</dev:code>
				<dev:remarks>
					<maml:para>[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default
is &quot;Y&quot;)

TotalSize                       Retrieved                     TotalSizeMB
              RetrievedMB
---------                       ---------                     -----------
              -----------
264147489                       214105710                           251,9
                    204,2

Description
-----------
Removes all &#39;System&#39; temp files older then 3 month</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Remove-TempFiles -Month 3 -Context &#39;User&#39;</dev:code>
				<dev:remarks>
					<maml:para>[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default
is &quot;Y&quot;)

TotalSize                       Retrieved                     TotalSizeMB
              RetrievedMB
---------                       ---------                     -----------
              -----------
151519609                       145693231                           144,5
                    138,9

Description
-----------
Removes all &#39;User&#39; temp files older then 3 month.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Source http://powershell.com/cs/blogs/tips/archive/2016/05/27/cleaning-week-deleting-temp-files.aspx</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Repair-DotNetFrameWorks</command:name>
			<maml:description>
				<maml:para>Optimize all installed NET Frameworks</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Repair</command:verb>
			<command:noun>DotNetFrameWorks</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Optimize all installed NET Frameworks by executing NGEN.EXE for each.

This could be useful to improve the performance and sometimes the
installation of new NET Frameworks, or even patches, makes them use
a single (the first) core only.

Why Microsoft does not execute the NGEN.EXE with each installation...

no idea!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Repair-DotNetFrameWorks</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>The Function name is changed!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Repair-DotNetFrameWorks</dev:code>
				<dev:remarks>
					<maml:para>C:\Windows\Microsoft.NET\Framework\v4.0.30319\ngen.exe executeQueuedItems
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\ngen.exe executeQueuedItems

Description
-----------
Optimize all installed NET Frameworks</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Reset-Prompt</command:name>
			<maml:description>
				<maml:para>Restore the Default Prompt</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Reset</command:verb>
			<command:noun>Prompt</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Restore the Default Prompt</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Reset-Prompt</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Just a quick helper!

Reset the prompt and the window title back to the defaults</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>Josh@fra1w7vm01 /scripts/PowerShell/functions $ Reset-Prompt</dev:code>
				<dev:remarks>
					<maml:para>PS C:\scripts\PowerShell\functions&gt;

Description
-----------
If you modified the prompt before, this command restores the
PowerShell default for you</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Set-LinuxPrompt
Set-PowerPrompt</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Set-DefaultPrompt
Set-ServicePrompt</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Send-HipChat</command:name>
			<maml:description>
				<maml:para>Send a notification message to a HipChat room.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Send</command:verb>
			<command:noun>HipChat</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Send a notification message to a HipChat room via a RESTful Call to
the HipChat API V2 Atlassian requires a separate token for each room
within HipChat!

So please note, that the Room and the Token parameter must match.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Send-HipChat</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="AUTH_TOKEN">
					<maml:name>Token</maml:name>
					<maml:description>
						<maml:para>HipChat Auth Token</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="ROOM_ID">
					<maml:name>Room</maml:name>
					<maml:description>
						<maml:para>HipChat Room Name that get the notification.
The Token has to fit to the Room!</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
					<maml:name>notify</maml:name>
					<maml:description>
						<maml:para>Whether this message should trigger a user notification
(change the tab color, play a sound, notify mobile phones, etc).
Each recipient&#39;s notification preferences are taken into account.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Boolean</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
					<maml:name>color</maml:name>
					<maml:description>
						<maml:para>Background color for message.

Valid is
- yellow
- green
- red
- purple
- gray
-random</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
					<maml:name>Message</maml:name>
					<maml:description>
						<maml:para>The message body itself. Please see the HipChat API V2 documentation</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="5" aliases="message_format">
					<maml:name>Format</maml:name>
					<maml:description>
						<maml:para>Determines how the message is treated by our server and rendered
inside HipChat applications</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="AUTH_TOKEN">
				<maml:name>Token</maml:name>
				<maml:description>
					<maml:para>HipChat Auth Token</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>8EWA77eidxEJG5IFluWjD9794ft8WSzfKhjBCKpv</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="ROOM_ID">
				<maml:name>Room</maml:name>
				<maml:description>
					<maml:para>HipChat Room Name that get the notification.
The Token has to fit to the Room!</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>Testing</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>notify</maml:name>
				<maml:description>
					<maml:para>Whether this message should trigger a user notification
(change the tab color, play a sound, notify mobile phones, etc).
Each recipient&#39;s notification preferences are taken into account.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Boolean</command:parameterValue>
				<dev:type>
					<maml:name>Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>color</maml:name>
				<maml:description>
					<maml:para>Background color for message.

Valid is
- yellow
- green
- red
- purple
- gray
-random</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>gray</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
				<maml:name>Message</maml:name>
				<maml:description>
					<maml:para>The message body itself. Please see the HipChat API V2 documentation</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="5" aliases="message_format">
				<maml:name>Format</maml:name>
				<maml:description>
					<maml:para>Determines how the message is treated by our server and rendered
inside HipChat applications</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>text</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>We use the API V2 now ;-)</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-HipChat -Message &quot;This is just a BuildServer Test&quot; -color &quot;gray&quot; -Room &quot;Testing&quot; -notify $true</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Sent a HipChat Room notification &quot;This is just a BuildServer Test&quot; to
the Room &quot;Testing&quot;.
It uses the Color &quot;gray&quot;, and it sends a notification to all users
in the room.
It uses a default Token to do so!</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-HipChat -Message &quot;Hello @JoergHochwald&quot; -color &quot;Red&quot; -Room &quot;DevOps&quot; -Token &quot;1234567890&quot; -notify $false</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Sent a HipChat Room notification &quot;Hello @JoergHochwald&quot; to the
Room &quot;DevOps&quot;.
The @ indicates a user mention, this is supported like in a regular
chat from user 2 User.
It uses the Color &quot;red&quot;, and it sends no notification to users in
the room.
It uses a Token &quot;1234567890&quot; to do so! The Token must match the Room!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>API: https://www.hipchat.com/docs/apiv2</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Docs: https://www.hipchat.com/docs/apiv2/method/send_room_notification</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Send-Packet</command:name>
			<maml:description>
				<maml:para>Send a packet via IP, TCP or UDP</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Send</command:verb>
			<command:noun>Packet</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Send a packet via IP, TCP or UDP
Found this useful to test firewall configurations and routing.
Or even to test some services.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Send-Packet</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Target</maml:name>
					<maml:description>
						<maml:para>Target name or IP</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
					<maml:name>Protocol</maml:name>
					<maml:description>
						<maml:para>protocol to use, default is IP</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
					<maml:name>TargetPort</maml:name>
					<maml:description>
						<maml:para>Target Port (against the target)</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
					<maml:name>SourcePort</maml:name>
					<maml:description>
						<maml:para>Fake Source port (Default is random)</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
					<maml:name>TTL</maml:name>
					<maml:description>
						<maml:para>The Time To Life (Default is 128)</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="5">
					<maml:name>Count</maml:name>
					<maml:description>
						<maml:para>The count, how many packets? (Default is one)</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Target</maml:name>
				<maml:description>
					<maml:para>Target name or IP</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Protocol</maml:name>
				<maml:description>
					<maml:para>protocol to use, default is IP</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>IP</dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>TargetPort</maml:name>
				<maml:description>
					<maml:para>Target Port (against the target)</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>0</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>SourcePort</maml:name>
				<maml:description>
					<maml:para>Fake Source port (Default is random)</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>(Get-Random -Minimum 0 -Maximum 65535)</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
				<maml:name>TTL</maml:name>
				<maml:description>
					<maml:para>The Time To Life (Default is 128)</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>128</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="5">
				<maml:name>Count</maml:name>
				<maml:description>
					<maml:para>The count, how many packets? (Default is one)</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">Int32</command:parameterValue>
				<dev:type>
					<maml:name>Int32</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>1</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on an idea of JohnLaska</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-Packet -Target &#39;10.10.16.29&#39; -Protocol &#39;TCP&#39; -TargetPort &#39;4711&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Send a &#39;TCP&#39; packet on port &#39;4711&#39; to target &#39;10.10.16.29&#39;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-Packet -Target &#39;10.10.16.29&#39; -Protocol &#39;UDP&#39; -TargetPort &#39;4711&#39; -Count &#39;10&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Send 10 &#39;UDP&#39; packets on port &#39;4711&#39; to target &#39;10.10.16.29&#39;</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-Packet -Target &#39;10.10.16.29&#39; -Protocol &#39;TCP&#39; -TargetPort &#39;4711&#39; -SourcePort &#39;14712&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Send a &#39;TCP&#39; packet on port &#39;4711&#39; to target &#39;10.10.16.29&#39; and it
uses a fake source port &#39;14712&#39;
This could be useful for port knocking or to check Firewall behaviors</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Source: https://github.com/JohnLaska/PowerShell/blob/master/Send-Packet.ps1</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Send-SlackChat</command:name>
			<maml:description>
				<maml:para>Sends a chat message to a Slack organization</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Send</command:verb>
			<command:noun>SlackChat</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Post-ToSlack cmdlet is used to send a chat message to a Slack
channel, group, or person.

Slack requires a token to authenticate to an organization within Slack.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Send-SlackChat</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>Channel</maml:name>
					<maml:description>
						<maml:para>Slack Channel to post to</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
					<maml:name>Message</maml:name>
					<maml:description>
						<maml:para>Chat message to post</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
					<maml:name>token</maml:name>
					<maml:description>
						<maml:para>Slack API token</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="Name">
					<maml:name>BotName</maml:name>
					<maml:description>
						<maml:para>Optional name for the bot</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>Channel</maml:name>
				<maml:description>
					<maml:para>Slack Channel to post to</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Message</maml:name>
				<maml:description>
					<maml:para>Chat message to post</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>token</maml:name>
				<maml:description>
					<maml:para>Slack API token</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="Name">
				<maml:name>BotName</maml:name>
				<maml:description>
					<maml:para>Optional name for the bot</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>Build Bot</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on an idea of @ChrisWahl
Please note the Name change and the removal of some functions</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-SlackChat -channel &#39;#general&#39; -message &#39;Hello everyone!&#39; -botname &#39;The Borg&#39; -token &#39;1234567890&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This will send a message to the &quot;#General&quot; channel using a specific
token 1234567890, and the bot&#39;s name will be &quot;The Borg&quot;.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Send-SlackChat -channel &#39;#general&#39; -message &#39;Hello everyone!&#39; -token &#39;1234567890&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This will send a message to the &quot;#General&quot; channel using a specific t
oken 1234567890, and the bot&#39;s name will be default (&quot;Build Bot&quot;).</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Info: https://api.slack.com/tokens</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>API: https://api.slack.com/web</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Info: https://api.slack.com/bot-users</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-AcceptProtocolViolation</command:name>
			<maml:description>
				<maml:para>Workaround for servers with SSL header problems</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>AcceptProtocolViolation</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Workaround for the following Exception &quot;DownloadString&quot; with &quot;1&quot;
argument(s):
&quot;The underlying connection was closed: Could not establish trust
relationship for the SSL/TLS secure channel.&quot;</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-AcceptProtocolViolation</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Be careful:
This is just a workaround for servers that have a problem with
SSL headers.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-AcceptProtocolViolation</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Establish the workaround (Be careful)</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-Culture</command:name>
			<maml:description>
				<maml:para>Set the PowerShell culture to a given culture</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>Culture</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Set the PowerShell culture to a given culture</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-Culture</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
					<maml:name>culture</maml:name>
					<maml:description>
						<maml:para>Culture to use</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">CultureInfo</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1">
				<maml:name>culture</maml:name>
				<maml:description>
					<maml:para>Culture to use</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">CultureInfo</command:parameterValue>
				<dev:type>
					<maml:name>CultureInfo</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>en-US</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.Globalization.CultureInfo</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Inspired by Use-Culture.ps1 by Lee Holmes</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-Culture -culture &quot;en-US&quot; | ConvertFrom-UnixDate -Date 1458205878</dev:code>
				<dev:remarks>
					<maml:para>Thursday, March 17, 2016 9:11:18 AM

Description
-----------
Returns the date in the given culture (en-US) format instead of
the system culture.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Use-Culture http://poshcode.org/2226</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-Encoding</command:name>
			<maml:description>
				<maml:para>Converts Encoding of text files</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>Encoding</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Allows you to change the encoding of files and folders.
It supports file extension agnostic

Please note: Overwrites original file if destination equals the path</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-Encoding</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="PathName">
					<maml:name>path</maml:name>
					<maml:description>
						<maml:para>Folder or file to convert</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="Destination">
					<maml:name>dest</maml:name>
					<maml:description>
						<maml:para>If you want so save the newly encoded file/files to a new location</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="enc">
					<maml:name>encoding</maml:name>
					<maml:description>
						<maml:para>Encoding method to use for the Patch or File</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="PathName">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Folder or file to convert</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="Destination">
				<maml:name>dest</maml:name>
				<maml:description>
					<maml:para>If you want so save the newly encoded file/files to a new location</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>$path</dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="enc">
				<maml:name>encoding</maml:name>
				<maml:description>
					<maml:para>Encoding method to use for the Patch or File</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>BETA!!!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-Encoding -path &quot;c:\windows\temps\folder1&quot; -encoding &quot;UTF8&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Converts all Files in the Folder c:\windows\temps\folder1 in the UTF8 format</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-Encoding -path &quot;c:\windows\temps\folder1&quot; -dest &quot;c:\windows\temps\folder2&quot; -encoding &quot;UTF8&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Converts all Files in the Folder c:\windows\temps\folder1 in the UTF8
format and save them to c:\windows\temps\folder2</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>(Get-Content -path &quot;c:\temp\test.txt&quot;) | Set-Content -Encoding UTF8 -Path &quot;c:\temp\test.txt&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
This converts a single File via hardcore PowerShell without a Script.
Might be useful if you want to convert this script after a transfer!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-FolderDate</command:name>
			<maml:description>
				<maml:para>Change one folder, or more, last-write time based on the latest
last-write of the included files</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>FolderDate</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Change one folder, or more, folder last-write time based on the
latest last-write of the included files
Makes windows a lot more Uni* like and have some Convenience.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-FolderDate</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>One folder, or more, you would like to update

Default is C:\scripts\PowerShell\log</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>One folder, or more, you would like to update

Default is C:\scripts\PowerShell\log</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>C:\scripts\PowerShell\log</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>We intercept all Errors! This is the part in the &quot;BEGIN&quot; block.
You might want to change that to a warning...

We use this function in bulk operations and from scheduled scripts,
so we do not want that!!!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-FolderDate -Path &quot;D:\temp&quot;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Change &quot;D:\temp&quot; last-write time based on the latest last-write
of the included files</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-VisualEditor</command:name>
			<maml:description>
				<maml:para>Set the VisualEditor variable</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>VisualEditor</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Setup the VisualEditor variable. Checks if the free (GNU licensed)
Notepad++ is installed,
if so it uses this great free editor.

If not the fall back is the PowerShell ISE.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-VisualEditor</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This is just a little helper function to make the shell more flexible</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-VisualEditor</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Set the VisualEditor variable. Nothing is returned, no parameter,
no nothing ;-)</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$VisualEditor</dev:code>
				<dev:remarks>
					<maml:para>C:\Program Files (x86)\Notepad++\notepad++.exe

Description
-----------
Show the variable (Notepad++ in this case)</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$VisualEditor</dev:code>
				<dev:remarks>
					<maml:para>PowerShell_ISE.exe

Description
-----------
Show the variable (PowerShell ISE in this case)
So no Sublime (our favorite) or Notepad++ (Fallback) installed.
looks like a plain vanilla PowerShell box.
But hey, since PowerShell 4, ISE is great!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-ShortTime</command:name>
			<maml:description>
				<maml:para>Get the Time as short String</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>ShortTime</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get the Time as short String</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-ShortTime</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>FilenameCompatibleFormat</maml:name>
					<maml:description>
						<maml:para>Make sure it is compatible to File Timestamp</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>FilenameCompatibleFormat</maml:name>
				<maml:description>
					<maml:para>Make sure it is compatible to File Timestamp</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Helper Function based on an idea of Robert D. Biddle</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ShortTime</dev:code>
				<dev:remarks>
					<maml:para>16:17

Description
-----------
Get the Time as short String</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-ShortTime -FilenameCompatibleFormat</dev:code>
				<dev:remarks>
					<maml:para>16-17

Description
-----------
Get the Time as short String and replace the &#39;:&#39; with &#39;-&#39;.
Useful is you want to append this to filenames.
The dash could be bad for such use cases!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Source https://github.com/RobBiddle/Get-ShortDateTime/blob/master/Get-ShortDateTime.psm1</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-WithElevation</command:name>
			<maml:description>
				<maml:para>Uni* like Superuser Do (Sudo)</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>WithElevation</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This is not a hack or something:
You still to have the proper access rights (permission) to execute
something with elevated rights (permission)!
Windows will tell you (and ask for confirmation) that the given
command is executes with administrative rights.

The command opens another window and you can still use your existing
shell with you regular permissions.

Keep that in mind when you execute it...</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-WithElevation</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="FileName">
					<maml:name>file</maml:name>
					<maml:description>
						<maml:para>Script/Program to run</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="FileName">
				<maml:name>file</maml:name>
				<maml:description>
					<maml:para>Script/Program to run</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Still a internal Beta function!
Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>sudo &#39;C:\scripts\PowerShell\profile.ps1&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Try to execute &#39;C:\scripts\PowerShell\profile.ps1&#39; with elevation
We use the Uni* like alias here</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-WithElevation &#39;C:\scripts\PowerShell\profile.ps1&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Try to execute &#39;C:\scripts\PowerShell\profile.ps1&#39; with elevation</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>tail</command:name>
			<maml:description>
				<maml:para>Make the PowerShell a bit more *NIX like</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>tail</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Wrapper for the PowerShell command Get-Content. It opens a given
file and shows the content...
Get-Content normally exists as soon as the end of the given file is
reached, this wrapper keeps it open and display every new informations
as soon as it appears. This could be very useful for parsing log files.

Everyone ever used Unix or Linux known tail ;-)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>tail</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>f</maml:name>
					<maml:description>
						<maml:para>Follow</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>file</maml:name>
					<maml:description>
						<maml:para>File to open</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>f</maml:name>
				<maml:description>
					<maml:para>Follow</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>file</maml:name>
				<maml:description>
					<maml:para>File to open</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>tail C:\scripts\PowerShell\logs\create_new_OU_Structure.log</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Opens the given Log file
(C:\scripts\PowerShell\logs\create_new_OU_Structure.log) and shows
every new entry until you break it (CTRL + C)</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>tail2</command:name>
			<maml:description>
				<maml:para>Make the PowerShell a bit more *NIX like</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>tail2</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Wrapper for the PowerShell command Get-Content. It opens a given file
and shows the content...
Get-Content normally exists as soon as the end of the given file is
reached, this wrapper keeps it open and display every new informations a
s soon as it appears. This could be very useful for parsing log files.

Everyone ever used Unix or Linux known tail ;-)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>tail2</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="FileName">
					<maml:name>file</maml:name>
					<maml:description>
						<maml:para>File to open</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="FileName">
				<maml:name>file</maml:name>
				<maml:description>
					<maml:para>File to open</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>tail2 C:\scripts\PowerShell\logs\create_new_OU_Structure.log</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Opens the given Log file
(C:\scripts\PowerShell\logs\create_new_OU_Structure.log) and shows
every new entry until you break it (CTRL + C)</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Test-Method</command:name>
			<maml:description>
				<maml:para>Check if the given Function is loaded from a given Module</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Test</command:verb>
			<command:noun>Method</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Check if the given Function is loaded from a given Module</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Test-Method</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="moduleName">
					<maml:name>Module</maml:name>
					<maml:description>
						<maml:para>Name of the Module</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2" aliases="functionName">
					<maml:name>Function</maml:name>
					<maml:description>
						<maml:para>Name of the function</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="moduleName">
				<maml:name>Module</maml:name>
				<maml:description>
					<maml:para>Name of the Module</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2" aliases="functionName">
				<maml:name>Function</maml:name>
				<maml:description>
					<maml:para>Name of the function</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Quick helper function to shortcut things. / MBE</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Test-Method -Module &#39;NETX.AD&#39; -Function &#39;Add-AdThumbnailPhoto&#39;</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Check if the given Function &#39;Add-AdThumbnailPhoto&#39; is loaded from a
given Module &#39;NETX.AD&#39;, what it IS.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Test-Method -Module &#39;NETX.AD&#39; -Function &#39;Test-TCPPort&#39;</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Check if the given Function &#39;Test-TCPPort&#39; is loaded from a given
Module &#39;NETX.AD&#39;, what it is NOT.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Test-ModuleAvailableToLoad</command:name>
			<maml:description>
				<maml:para>Test if the given Module exists</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Test</command:verb>
			<command:noun>ModuleAvailableToLoad</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Test if the given Module exists</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Test-ModuleAvailableToLoad</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>modname</maml:name>
					<maml:description>
						<maml:para>Name of the Module to check</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>modname</maml:name>
				<maml:description>
					<maml:para>Name of the Module to check</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Quick helper function</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Test-ModuleAvailableToLoad EXISTINGMOD</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
This module exists</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Test-ModuleAvailableToLoad WRONGMODULE</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
This Module does not exists</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>$MSOLModname = &quot;MSOnline&quot;</dev:code>
				<dev:remarks>
					<maml:para>$MSOLTrue = (Test-ModuleAvailableToLoad $MSOLModName)

Description
-----------
Bit more complex example that put the Boolean in a variable
for later use.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Test-ProxyBypass</command:name>
			<maml:description>
				<maml:para>Testing URLs for Proxy Bypass</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Test</command:verb>
			<command:noun>ProxyBypass</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>If you&#39;d like to find out whether a given URL goes through a proxy or
is accessed directly</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Test-ProxyBypass</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="uri">
					<maml:name>url</maml:name>
					<maml:description>
						<maml:para>URL to check for Proxy Bypass</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="uri">
				<maml:name>url</maml:name>
				<maml:description>
					<maml:para>URL to check for Proxy Bypass</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>http://support.NET-Experts.net</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Initial version of the function</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Test-ProxyBypass -url &#39;https://outlook.office.com&#39;</dev:code>
				<dev:remarks>
					<maml:para>True

Description
-----------
Check if the given URL &#39;https://outlook.office.com&#39; is directly
accessible, what it IS!</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Test-ProxyBypass -url &#39;http://technet.microsoft.com&#39;</dev:code>
				<dev:remarks>
					<maml:para>False

Description
-----------
Check if the given URL &#39;http://technet.microsoft.com&#39; is directly
accessible, what it is NOT!</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText></maml:linkText>
				<maml:uri>Source: http://powershell.com/cs/blogs/tips/archive/2012/08/14/testing-urls-for-proxy-bypass.aspx</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Test-RemotePOSH</command:name>
			<maml:description>
				<maml:para>Check if PSRemoting (Remote execution of PowerShell) is enabled on
a given Host</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Test</command:verb>
			<command:noun>RemotePOSH</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Check if PSRemoting (Remote execution of PowerShell) is enabled on
a given Host</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Test-RemotePOSH</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Computer</maml:name>
					<maml:description>
						<maml:para></maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>POSHcred</maml:name>
					<maml:description>
						<maml:para>The credentials to use!

Default is the credentials that we use for Azure, Exchange...</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">PSCredential</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Computer</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>($Env:computername)</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>POSHcred</maml:name>
				<maml:description>
					<maml:para>The credentials to use!

Default is the credentials that we use for Azure, Exchange...</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">PSCredential</command:parameterValue>
				<dev:type>
					<maml:name>PSCredential</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Initial Beta based on an idea of Adrian Rodriguez (adrian@rdrgz.net)</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Enable-RemotePOSH -ComputerName &#39;NXLIMCLN01&#39;</dev:code>
				<dev:remarks>
					<maml:para>WARNING: Unable to establish remote session with NXLIMCLN01.

Description
-----------
Check if PSRemoting (Remote execution of PowerShell) is enabled on
&#39;NXLIMCLN01&#39;. It uses the default credentials (Same that we use to
administer Exchange Online and Azue)</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Enable-RemotePOSH -ComputerName &#39;NXLIMCLN02&#39; -POSHcred (Get-Credential)</dev:code>
				<dev:remarks>
					<maml:para>NXLIMCLN02

Description
-----------
Check if PSRemoting (Remote execution of PowerShell) is enabled on
&#39;NXLIMCLN02&#39;.

And is asks for the credentials to use.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-Time</command:name>
			<maml:description>
				<maml:para>Timing How Long it Takes a Script or Command to Run</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>Time</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This is a quick wrapper for Measure-Command Cmdlet

Make the PowerShell a bit more *NIX like

Everyone ever used Unix or Linux known time ;-)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-Time</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Command">
					<maml:name>file</maml:name>
					<maml:description>
						<maml:para>Script or command to execute</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Command">
				<maml:name>file</maml:name>
				<maml:description>
					<maml:para>Script or command to execute</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>time new-Bulk-devices.ps1</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Runs the script new-Bulk-devices.ps1 and shows how log it takes
to execute

We use the well known Uni* alias here!</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>time Get-Service | Export-Clixml c:\scripts\test.xml</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
When you run this command, service information will be saved to
the file Test.xml

It also shows how log it takes to execute
We use the well known Uni* alias here!</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-Time new-Bulk-devices.ps1</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Runs the script new-Bulk-devices.ps1 and shows how log it takes to
execute

Makes no sense, instead of Measure-Command we use Get-Time,
but we need to use this name to make it right ;-)</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-FileTime</command:name>
			<maml:description>
				<maml:para>Change file Creation + Modification + Last Access times</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>FileTime</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The touch utility sets the Creation + Modification + Last Access
times of files.

If any file does not exist, it is created with default permissions by
default.

To prevent this, please use the -NoCreate parameter!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-FileTime</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Path to the File that we would like to change</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>AccessTime</maml:name>
					<maml:description>
						<maml:para>Change the Access Time Only</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>WriteTime</maml:name>
					<maml:description>
						<maml:para>Change the Write Time Only</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>CreationTime</maml:name>
					<maml:description>
						<maml:para>Change the Creation Time Only</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
					<maml:name>NoCreate</maml:name>
					<maml:description>
						<maml:para>Do not create a new file, if the given one does not exist.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
					<maml:name>Date</maml:name>
					<maml:description>
						<maml:para>Date to set</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">DateTime</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Path to the File that we would like to change</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AccessTime</maml:name>
				<maml:description>
					<maml:para>Change the Access Time Only</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>WriteTime</maml:name>
				<maml:description>
					<maml:para>Change the Write Time Only</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CreationTime</maml:name>
				<maml:description>
					<maml:para>Change the Creation Time Only</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoCreate</maml:name>
				<maml:description>
					<maml:para>Do not create a new file, if the given one does not exist.</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Date</maml:name>
				<maml:description>
					<maml:para>Date to set</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">DateTime</command:parameterValue>
				<dev:type>
					<maml:name>DateTime</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>touch foo.txt</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Change the Creation + Modification + Last Access Date/time and if the
file does not already exist, create it with the default permissions.
We use the alias touch instead of Set-FileTime to make it more *NIX like</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-FileTime foo.txt -NoCreate</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Change the Creation + Modification + Last Access Date/time if this
file exists.

The -NoCreate makes sure, that the file will not be created!</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-FileTime foo.txt -only_modification</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Change only the modification time</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>Set-FileTime foo.txt -only_access</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Change only the last access time</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 5 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>dir . -recurse -filter &quot;*.xls&quot; | Set-FileTime</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Change multiple files</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Based on this: http://ss64.com/ps/syntax-touch.html</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>ConvertFrom-UrlEncoded</command:name>
			<maml:description>
				<maml:para>Decodes a UrlEncoded string.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>ConvertFrom</command:verb>
			<command:noun>UrlEncoded</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Decodes a UrlEncoded string.

Input can be either a positional or named parameters of type string or
an array of strings.

The Cmdlet accepts pipeline input.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>ConvertFrom-UrlEncoded</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
					<maml:name>InputObject</maml:name>
					<maml:description>
						<maml:para>A description of the InputObject parameter.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="0">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>A description of the InputObject parameter.</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>ConvertFrom-UrlEncoded &#39;http%3a%2f%2fwww.d-fens.ch&#39;</dev:code>
				<dev:remarks>
					<maml:para>http://www.d-fens.ch

Description
-----------
Encoded string is passed as a positional parameter to the Cmdlet.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>ConvertFrom-UrlEncoded -InputObject &#39;http%3a%2f%2fwww.d-fens.ch&#39;</dev:code>
				<dev:remarks>
					<maml:para>http://www.d-fens.ch

Description
-----------
Encoded string is passed as a named parameter to the Cmdlet.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>ConvertFrom-UrlEncoded -InputObject &#39;http%3a%2f%2fwww.d-fens.ch&#39;, &#39;http%3a%2f%2fwww.dfch.biz%2f&#39;</dev:code>
				<dev:remarks>
					<maml:para>http://www.d-fens.ch
http://www.dfch.biz/

Description
-----------
Encoded strings are passed as an implicit array to the Cmdlet.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>ConvertFrom-UrlEncoded -InputObject @(&quot;http%3a%2f%2fwww.d-fens.ch&quot;, &quot;http%3a%2f%2fwww.dfch.biz%2f&quot;)</dev:code>
				<dev:remarks>
					<maml:para>http://www.d-fens.ch
http://www.dfch.biz/

Description
-----------
Encoded strings are passed as an explicit array to the Cmdlet.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 5 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>@(&quot;http%3a%2f%2fwww.d-fens.ch&quot;, &quot;http%3a%2f%2fwww.dfch.biz%2f&quot;) | ConvertFrom-UrlEncoded</dev:code>
				<dev:remarks>
					<maml:para>http://www.d-fens.ch
http://www.dfch.biz/

Description
-----------
Encoded strings are piped as an explicit array to the Cmdlet.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 6 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>&quot;http%3a%2f%2fwww.dfch.biz%2f&quot; | ConvertFrom-UrlEncoded</dev:code>
				<dev:remarks>
					<maml:para>http://www.dfch.biz/

Description
-----------
Encoded string is piped to the Cmdlet.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 7 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$r = @(&quot;http%3a%2f%2fwww.d-fens.ch&quot;, 0, &quot;http%3a%2f%2fwww.dfch.biz%2f&quot;) | ConvertFrom-UrlEncoded</dev:code>
				<dev:remarks>
					<maml:para>PS C:\&gt; $r
http://www.d-fens.ch
0
http://www.dfch.biz/

Description
-----------
In case one of the passed strings is not a UrlEncoded encoded string,
the plain string is returned. The pipeline will continue to execute
and all strings are returned.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Online Version: http://dfch.biz/biz/dfch/PS/System/Utilities/ConvertFrom-UrlEncoded/</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>ConvertTo-UrlEncoded</command:name>
			<maml:description>
				<maml:para></maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>ConvertTo</command:verb>
			<command:noun>UrlEncoded</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>ConvertTo-UrlEncoded</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0">
					<maml:name>InputObject</maml:name>
					<maml:description>
						<maml:para></maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Online version:</maml:linkText>
				<maml:uri>http://dfch.biz/biz/dfch/PS/System/Utilities/ConvertTo-UrlEncoded/</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-TinyURL</command:name>
			<maml:description>
				<maml:para>Get a Short URL</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>TinyURL</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get a Short URL using the TINYURL.COM Service</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-TinyURL</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="URL2Tiny">
					<maml:name>URL</maml:name>
					<maml:description>
						<maml:para>Long URL</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="URL2Tiny">
				<maml:name>URL</maml:name>
				<maml:description>
					<maml:para>Long URL</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Still a beta Version!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-TinyURL -URL &#39;http://net-experts.net&#39;</dev:code>
				<dev:remarks>
					<maml:para>http://tinyurl.com/yc63nbh

Description
-----------
Request the TINYURL for http://net-experts.net.
In this example the Return is http://tinyurl.com/yc63nbh</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-IsGdURL</command:name>
			<maml:description>
				<maml:para>Get a Short URL</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>IsGdURL</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get a Short URL using the IS.GD Service</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-IsGdURL</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="URL2GD">
					<maml:name>URL</maml:name>
					<maml:description>
						<maml:para>Long URL</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="URL2GD">
				<maml:name>URL</maml:name>
				<maml:description>
					<maml:para>Long URL</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Additional information about the function.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-IsGdURL -URL &#39;http://net-experts.net&#39;</dev:code>
				<dev:remarks>
					<maml:para>http://is.gd/FkMP5v

Description
-----------
Request the IS.GD for http://net-experts.net.
In this example the Return is http://is.gd/FkMP5v</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-TrImURL</command:name>
			<maml:description>
				<maml:para>Get a Short URL</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>TrImURL</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Get a Short URL using the TR.IM Service</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-TrImURL</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="URL2Trim">
					<maml:name>URL</maml:name>
					<maml:description>
						<maml:para>Long URL</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="URL2Trim">
				<maml:name>URL</maml:name>
				<maml:description>
					<maml:para>Long URL</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>The service is off line at the moment!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-TrImURL -URL &#39;http://net-experts.net&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Request the tr.im for http://net-experts.net.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-LongURL</command:name>
			<maml:description>
				<maml:para>Expand a Short URL</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>LongURL</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Expand a Short URL via the untiny.me
This service supports all well known short URL services!</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-LongURL</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="URL2Exapnd">
					<maml:name>URL</maml:name>
					<maml:description>
						<maml:para>Short URL</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="URL2Exapnd">
				<maml:name>URL</maml:name>
				<maml:description>
					<maml:para>Short URL</maml:para>
				</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>This service supports all well known short URL services!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LongURL -URL &#39;http://cutt.us/KX5CD&#39;</dev:code>
				<dev:remarks>
					<maml:para>http://net-experts.net

Description
-----------
Get the Long URL (http://net-experts.net) for a given Short URL</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>whoami</command:name>
			<maml:description>
				<maml:para>Shows the windows login info</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>whoami</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Make PowerShell a bit more like *NIX! Shows the Login info as you
might know it from Unix/Linux</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>whoami</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Make PowerShell a bit more like *NIX!</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>whoami</dev:code>
				<dev:remarks>
					<maml:para>BART\josh

Description
-----------
Login (User) Josh on the system named BART</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Write-ToLog</command:name>
			<maml:description>
				<maml:para>Write Log to file and screen</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Write</command:verb>
			<command:noun>ToLog</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Write Log to file and screen
Each line has a UTC Time-stamp</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Write-ToLog</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Log">
					<maml:name>LogFile</maml:name>
					<maml:description>
						<maml:para>Name of the Log-file</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="Log">
				<maml:name>LogFile</maml:name>
				<maml:description>
					<maml:para>Name of the Log-file</maml:para>
				</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Early Beta Version...
Based on an idea/script of Michael Bayer</maml:para>
			</maml:alert>
		</maml:alertSet>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Describe</command:name>
			<maml:description>
				<maml:para>Describe</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>Describe</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Describe</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Context</command:name>
			<maml:description>
				<maml:para>Set-MsolADFSContext</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>Context</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Context</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>It</command:name>
			<maml:description>
				<maml:para>Retrieves the last write time of the supplied registry key</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>It</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Registry data that a hive stores in containers are called cells.
A cell can hold a key, a value, a security descriptor, a list of
subkeys, or a list of key values.
Get-RegKeyLastWriteTime retrieves the LastWriteTime through a pointer
to the FILETIME structure that receives the time at which the
enumerated subkey was last written. Values do not contain a
LastWriteTime property, but changes to child values update the
parent keys lpftLastWriteTime.

The LastWriteTime is updated when a key is created, modified,
accessed, or deleted.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>It</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>LICENSE: Creative Commons Attribution 3.0 Unported License
(http://creativecommons.org/licenses/by/3.0/)</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-RegKeyLastWriteTime -ComputerName &#39;testwks&#39; -Key &#39;HKLM&#39; -SubKey &#39;Software&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Retrieves the last write time of the supplied registry key</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-RegKeyLastWriteTime -SubKey &#39;Software\Microsoft&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Retrieves the last write time of the supplied registry key</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>&quot;testwks1&quot;,&quot;testwks2&quot; | Get-RegKeyLastWriteTime -SubKey &#39;Software\Microsoft\Windows\CurrentVersion&#39;</dev:code>
				<dev:remarks>
					<maml:para>Description
-----------
Retrieves the last write time of the supplied registry key</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>Online version:</maml:linkText>
				<maml:uri>http://www.shaunhess.com/journal/2011/7/4/reading-the-lastwritetime-of-a-registry-key-using-powershell.html</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Should</command:name>
			<maml:description>
				<maml:para>Should</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>Should</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Should</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Mock</command:name>
			<maml:description>
				<maml:para>Mock</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>Mock</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Mock</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Assert-MockCalled</command:name>
			<maml:description>
				<maml:para>Assert-MockCalled</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Assert</command:verb>
			<command:noun>MockCalled</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Assert-MockCalled</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Assert-VerifiableMocks</command:name>
			<maml:description>
				<maml:para>Assert-VerifiableMocks</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Assert</command:verb>
			<command:noun>VerifiableMocks</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Assert-VerifiableMocks</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>New-Fixture</command:name>
			<maml:description>
				<maml:para>New-Fixture</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>New</command:verb>
			<command:noun>Fixture</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>New-Fixture</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-TestDriveItem</command:name>
			<maml:description>
				<maml:para>Get-TestDriveItem</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>TestDriveItem</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-TestDriveItem</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-Pester</command:name>
			<maml:description>
				<maml:para>Invoke-Pester</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>Pester</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-Pester</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Setup</command:name>
			<maml:description>
				<maml:para>Setup</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>Setup</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Setup</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>In</command:name>
			<maml:description>
				<maml:para>Function to convert an array into a string list with a delimiter.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>In</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>Function to convert an array into a string list with a delimiter.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>In</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
			<maml:title></maml:title>
			<maml:alert>
				<maml:para>Based on an idea of Francois-Xavier Cat</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>$Computers = &quot;Computer1&quot;,&quot;Computer2&quot;</dev:code>
				<dev:remarks>
					<maml:para>ConvertTo-StringList -Array $Computers

Description
-----------
Computer1,Computer2</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>$Computers = &quot;Computer1&quot;,&quot;Computer2&quot;</dev:code>
				<dev:remarks>
					<maml:para>ConvertTo-StringList -Array $Computers -Delimiter &quot;__&quot;

Description
-----------
Computer1__Computer2</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>C:\PS&gt;</maml:para>
				</maml:introduction>
				<dev:code>$Computers = &quot;Computer1&quot;</dev:code>
				<dev:remarks>
					<maml:para>ConvertTo-StringList -Array $Computers -Delimiter &quot;__&quot;

Description
-----------
Computer1</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
			<maml:navigationLink>
				<maml:linkText>NET-Experts http://www.net-experts.net</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Support https://github.com/jhochwald/NETX/issues</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>InModuleScope</command:name>
			<maml:description>
				<maml:para>InModuleScope</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>InModuleScope</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>InModuleScope</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-Mock</command:name>
			<maml:description>
				<maml:para>Invoke-Mock</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>Mock</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-Mock</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>BeforeEach</command:name>
			<maml:description>
				<maml:para>BeforeEach</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>BeforeEach</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>BeforeEach</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>AfterEach</command:name>
			<maml:description>
				<maml:para>AfterEach</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>AfterEach</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>AfterEach</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>BeforeAll</command:name>
			<maml:description>
				<maml:para>BeforeAll</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>BeforeAll</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>BeforeAll</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>AfterAll</command:name>
			<maml:description>
				<maml:para>AfterAll</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>AfterAll</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>AfterAll</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-MockDynamicParameters</command:name>
			<maml:description>
				<maml:para>Get-MockDynamicParameters</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>MockDynamicParameters</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-MockDynamicParameters</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-DynamicParameterVariables</command:name>
			<maml:description>
				<maml:para>Set-DynamicParameterVariables</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>DynamicParameterVariables</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-DynamicParameterVariables</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Set-TestInconclusive</command:name>
			<maml:description>
				<maml:para>Set-TestInconclusive</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>Set</command:verb>
			<command:noun>TestInconclusive</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Set-TestInconclusive</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>SafeGetCommand</command:name>
			<maml:description>
				<maml:para>SafeGetCommand</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb></command:verb>
			<command:noun>SafeGetCommand</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>SafeGetCommand</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>New-PesterOption</command:name>
			<maml:description>
				<maml:para>New-PesterOption</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>			</maml:copyright>
			<command:verb>New</command:verb>
			<command:noun>PesterOption</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para></maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>New-PesterOption</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>

				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<!--Generated by: SAPIEN PowerShell HelpWriter 2015 v1.0.16-->
</helpItems>
